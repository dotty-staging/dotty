-- Error: tests/neg-custom-args/captures/i21401.scala:13:14 ------------------------------------------------------------
13 |    op1(Boxed[IO^](x)) // error
   |              ^^^
   |              Type variable T of object Boxed cannot be instantiated to box IO^ since
   |              that type captures the root capability `cap`.
   |
   |              where:    ^ refers to the universal root capability
-- Error: tests/neg-custom-args/captures/i21401.scala:15:18 ------------------------------------------------------------
15 |  val a = usingIO[IO^](x => x) // error // error
   |                  ^^^
   |                  Type variable R of method usingIO cannot be instantiated to box IO^ since
   |                  that type captures the root capability `cap`.
   |
   |                  where:    ^ refers to the universal root capability
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/i21401.scala:15:23 ---------------------------------------
15 |  val a = usingIO[IO^](x => x) // error // error
   |                       ^^^^^^
   |Found:    (x: IO^?) ->? box IO^{x}
   |Required: (x: IO^) => box IO^²
   |
   |where:    => refers to a fresh root capability created in value a when checking argument to parameter op of method usingIO
   |          ^  refers to the universal root capability
   |          ^² refers to a fresh root capability created in value a when checking argument to parameter op of method usingIO
   |
   | longer explanation available when compiling with `-explain`
-- Error: tests/neg-custom-args/captures/i21401.scala:16:66 ------------------------------------------------------------
16 |  val leaked: [R, X <: Boxed[IO^] -> R] -> (op: X) -> R = usingIO[Res](mkRes) // error
   |                                                                  ^^^
   | Type variable R of method usingIO cannot be instantiated to [R, X <: Boxed[box IO^] -> R] => (op: X) -> R since
   | the part box IO^ of that type captures the root capability `cap`.
   |
   | where:    ^ refers to the universal root capability
-- Error: tests/neg-custom-args/captures/i21401.scala:17:29 ------------------------------------------------------------
17 |  val x: Boxed[IO^] = leaked[Boxed[IO^], Boxed[IO^] -> Boxed[IO^]](x => x) // error // error // error
   |                             ^^^^^^^^^^
   |                             Type variable R of value leaked cannot be instantiated to Boxed[box IO^] since
   |                             the part box IO^ of that type captures the root capability `cap`.
   |
   |                             where:    ^ refers to the universal root capability
-- Error: tests/neg-custom-args/captures/i21401.scala:17:52 ------------------------------------------------------------
17 |  val x: Boxed[IO^] = leaked[Boxed[IO^], Boxed[IO^] -> Boxed[IO^]](x => x) // error // error // error
   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^
   |                Type variable X of value leaked cannot be instantiated to Boxed[box IO^] -> Boxed[box IO^] since
   |                the part box IO^ of that type captures the root capability `cap`.
   |
   |                where:    ^ refers to the universal root capability
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/i21401.scala:17:67 ---------------------------------------
17 |  val x: Boxed[IO^] = leaked[Boxed[IO^], Boxed[IO^] -> Boxed[IO^]](x => x) // error // error // error
   |                                                                   ^^^^^^
   |                                              Found:    (x: Boxed[box IO^]^?) ->? Boxed[box IO^{x*}]^?
   |                                              Required: (x: Boxed[box IO^]) -> Boxed[box IO^²]
   |
   |                                              where:    ^  refers to the universal root capability
   |                                                        ^² refers to a fresh root capability created in value x²
   |
   | longer explanation available when compiling with `-explain`
