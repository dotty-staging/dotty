-- Error: tests/neg-custom-args/fatal-warnings/inline-unstable-accessors.scala:9:4 -------------------------------------
9 |    valBinaryAPI1 + // error
  |    ^^^^^^^^^^^^^
  |    Generated unstable inline accessor for value valBinaryAPI1 defined in class A.
  |
  |    Annotate valBinaryAPI1 with `@binaryAPIAccessor` to generate a stable accessor.
  |
  |    Adding @binaryAPIAccessor may break binary compatibility if a previous version of this
  |    library was compiled with Scala 3.0-3.3, Binary compatibility should be checked
  |    using MiMa. To keep binary you can add the following accessor to class A:
  |      @binaryAPI private[A] final def foo$A$$inline$valBinaryAPI1: Int = this.valBinaryAPI1
  |
-- Error: tests/neg-custom-args/fatal-warnings/inline-unstable-accessors.scala:10:4 ------------------------------------
10 |    valBinaryAPI2 + // error
   |    ^^^^^^^^^^^^^
   |    Generated unstable inline accessor for value valBinaryAPI2 defined in class A.
   |
   |    Annotate valBinaryAPI2 with `@binaryAPI` to make it accessible.
   |
   |    Adding @binaryAPI may break binary compatibility if a previous version of this
   |    library was compiled with Scala 3.0-3.3, Binary compatibility should be checked
   |    using MiMa. To keep binary you can add the following accessor to class A:
   |      @binaryAPI private[A] def foo$A$$inline$valBinaryAPI2: Int = this.valBinaryAPI2
   |
-- Error: tests/neg-custom-args/fatal-warnings/inline-unstable-accessors.scala:15:6 ------------------------------------
15 |    a.valBinaryAPI2 + // error
   |    ^^^^^^^^^^^^^^^
   |    Generated unstable inline accessor for value valBinaryAPI2 defined in class A.
   |
   |    Annotate valBinaryAPI2 with `@binaryAPI` to make it accessible.
   |
   |    Adding @binaryAPI may break binary compatibility if a previous version of this
   |    library was compiled with Scala 3.0-3.3, Binary compatibility should be checked
   |    using MiMa. To keep binary you can add the following accessor to class B:
   |      @binaryAPI private[B] def inline$valBinaryAPI2$i1(x$0: foo.A): Int = x$0.valBinaryAPI2
   |
-- Error: tests/neg-custom-args/fatal-warnings/inline-unstable-accessors.scala:24:4 ------------------------------------
24 |    valBinaryAPI1 + // error
   |    ^^^^^^^^^^^^^
   |    Generated unstable inline accessor for value valBinaryAPI1 defined in class C.
   |
   |    Annotate valBinaryAPI1 with `@binaryAPIAccessor` to generate a stable accessor.
   |
   |    Adding @binaryAPIAccessor may break binary compatibility if a previous version of this
   |    library was compiled with Scala 3.0-3.3, Binary compatibility should be checked
   |    using MiMa. To keep binary you can add the following accessor to class C:
   |      @binaryAPI private[C] final def inline$valBinaryAPI1: Int = this.valBinaryAPI1
   |
-- Error: tests/neg-custom-args/fatal-warnings/inline-unstable-accessors.scala:25:4 ------------------------------------
25 |    valBinaryAPI2 + // error
   |    ^^^^^^^^^^^^^
   |    Generated unstable inline accessor for value valBinaryAPI2 defined in class C.
   |
   |    Annotate valBinaryAPI2 with `@binaryAPI` to make it accessible.
   |
   |    Adding @binaryAPI may break binary compatibility if a previous version of this
   |    library was compiled with Scala 3.0-3.3, Binary compatibility should be checked
   |    using MiMa. To keep binary you can add the following accessor to class C:
   |      @binaryAPI private[C] def inline$valBinaryAPI2: Int = this.valBinaryAPI2
   |
-- Error: tests/neg-custom-args/fatal-warnings/inline-unstable-accessors.scala:30:6 ------------------------------------
30 |    c.valBinaryAPI2 + // error
   |    ^^^^^^^^^^^^^^^
   |    Generated unstable inline accessor for value valBinaryAPI2 defined in class C.
   |
   |    Annotate valBinaryAPI2 with `@binaryAPI` to make it accessible.
   |
   |    Adding @binaryAPI may break binary compatibility if a previous version of this
   |    library was compiled with Scala 3.0-3.3, Binary compatibility should be checked
   |    using MiMa. To keep binary you can add the following accessor to class D:
   |      @binaryAPI private[D] def inline$valBinaryAPI2$i2(x$0: foo.C): Int = x$0.valBinaryAPI2
   |
-- Error: tests/neg-custom-args/fatal-warnings/inline-unstable-accessors.scala:39:4 ------------------------------------
39 |    valBinaryAPI1 + // error
   |    ^^^^^^^^^^^^^
   |    Generated unstable inline accessor for value valBinaryAPI1 defined in object E.
   |
   |    Annotate valBinaryAPI1 with `@binaryAPIAccessor` to generate a stable accessor.
   |
   |    Adding @binaryAPIAccessor may break binary compatibility if a previous version of this
   |    library was compiled with Scala 3.0-3.3, Binary compatibility should be checked
   |    using MiMa. To keep binary you can add the following accessor to object E:
   |      @binaryAPI private[E] final def inline$valBinaryAPI1: Int = foo.E.valBinaryAPI1
   |
-- Error: tests/neg-custom-args/fatal-warnings/inline-unstable-accessors.scala:40:4 ------------------------------------
40 |    valBinaryAPI2 + // error
   |    ^^^^^^^^^^^^^
   |    Generated unstable inline accessor for value valBinaryAPI2 defined in object E.
   |
   |    Annotate valBinaryAPI2 with `@binaryAPI` to make it accessible.
   |
   |    Adding @binaryAPI may break binary compatibility if a previous version of this
   |    library was compiled with Scala 3.0-3.3, Binary compatibility should be checked
   |    using MiMa. To keep binary you can add the following accessor to object E:
   |      @binaryAPI private[E] def inline$valBinaryAPI2: Int = foo.E.valBinaryAPI2
   |
-- Error: tests/neg-custom-args/fatal-warnings/inline-unstable-accessors.scala:45:6 ------------------------------------
45 |    E.valBinaryAPI2 + // error
   |    ^^^^^^^^^^^^^^^
   |    Generated unstable inline accessor for value valBinaryAPI2 defined in object E.
   |
   |    Annotate valBinaryAPI2 with `@binaryAPI` to make it accessible.
   |
   |    Adding @binaryAPI may break binary compatibility if a previous version of this
   |    library was compiled with Scala 3.0-3.3, Binary compatibility should be checked
   |    using MiMa. To keep binary you can add the following accessor to object F:
   |      @binaryAPI private[F] def inline$valBinaryAPI2$i3(x$0: foo.E): Int = x$0.valBinaryAPI2
   |
