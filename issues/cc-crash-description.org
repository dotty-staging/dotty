#+name: ino
#+begin_src elisp :cache yes
  "cc-crash"
#+end_src

#+RESULTS[e1ea4809761475a8215eb3278492d58c168be3d1]: ino
: cc-crash

* Preamble

#+begin_src elisp :var ino=ino :results silent
  (write-file (concat ino "-description.org"))
#+end_src

#+begin_src elisp :var ino=ino :results silent
  (find-file (concat ino ".scala"))
#+end_src

#+begin_src elisp :var ino=ino :results silent
  (save-excursion
    (beginning-of-buffer)
    (while (re-search-forward (rx "$" "ISSUE$") nil t)
      (replace-match ino t t)))
#+end_src

* cc-crash

#+begin_src scala :tangle cc-crash.scala
import language.experimental.captureChecking
trait Cap { def use(): Int }
class Id[X](val value: [T] -> (op: X => T) -> T)
def mkId[X](x: X): Id[X] = Id([T] => (op: X => T) => op(x))
def bar() = {
  def withCap[X](op: (lcap: caps.Capability) ?-> Cap^{lcap} => X): X = {
    val cap: Cap = new Cap { def use() = { println("cap is used"); 0 } }
    val result = op(using caps.cap)(cap)
    result
  }
  // val leak = withCap(cap => mkId(cap))
  val leak = withCap: lcap ?=>
    c =>
      //mkId[Cap^{c}](c)
      mkId(c)
}
#+end_src

#+begin_src elisp
  (setq sbt/compile-arguments "-color:never -Xprint:cc -Ycc-debug")
  (sbt/run-until-output "scala3-compiler/compile")
  (sbt/compile-file-for-output "issues/cc-crash.scala")
#+end_src

#+RESULTS:
#+begin_example
[info] running (fork) dotty.tools.dotc.Main -d /Users/linyxus/Workspace/scala3/compiler/../out/default-last-scalac-out.jar -classpath /Users/linyxus/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.13.16/scala-library-2.13.16.jar:/Users/linyxus/Workspace/scala3/library/../out/bootstrap/scala3-library-bootstrapped/scala-3.7.2-RC1-bin-SNAPSHOT-nonbootstrapped/scala3-library_3-3.7.2-RC1-bin-SNAPSHOT.jar -color:never -Xprint:cc -Ycc-debug issues/cc-crash.scala
==> isSubType <empty>.type <:< a type that can be selected or applied?
<== isSubType <empty>.type <:< a type that can be selected or applied = true
==> isSubType language.type <:< ?{ experimental: ? }?
  ==> isSubType language.experimental.type <:< ??
  <== isSubType language.experimental.type <:< ? = true
<== isSubType language.type <:< ?{ experimental: ? } = true
==> isSubType language.experimental.type <:< a type that can be selected or applied?
<== isSubType language.experimental.type <:< a type that can be selected or applied = true
==> isSubType language.experimental.type <:< a type that can be selected or applied?
<== isSubType language.experimental.type <:< a type that can be selected or applied = true
==> isSubType PolyFunction <:< AnyTypeConstructorProto?
<== isSubType PolyFunction <:< AnyTypeConstructorProto = true
==> isSubType ImpureFunction1 <:< AnyTypeConstructorProto?
<== isSubType ImpureFunction1 <:< AnyTypeConstructorProto = true
==> isSubType Nothing <:< Any?
<== isSubType Nothing <:< Any = true
==> isSubType cc-crash$package.type <:< a type that can be selected or applied?
<== isSubType cc-crash$package.type <:< a type that can be selected or applied = true
==> isSubType Id <:< AnyTypeConstructorProto?
<== isSubType Id <:< AnyTypeConstructorProto = true
==> isSubType Id.type <:< ?{ apply: ? }?
  ==> isSubType (value: [T] => (op: X => T) -> T): Id[X] <:< ??
  <== isSubType (value: [T] => (op: X => T) -> T): Id[X] <:< ? = true
<== isSubType Id.type <:< ?{ apply: ? } = true
==> isSubType Id[X] <:< Id[X]?
  ==> isSubType X <:< X?
    ==> isSubType X <:< X?
      ==> isSubType X <:< X?
        ==> isSubType X <:< Nothing?
          ==> isSubType Any <:< Nothing (left is approximated)?
          <== isSubType Any <:< Nothing (left is approximated) = false
          ==> isSubType Any <:< Nothing?
          <== isSubType Any <:< Nothing = false
        <== isSubType X <:< Nothing = false
        ==> isSubType Any <:< X (left is approximated)?
          ==> isSubType Any <:< Nothing (left is approximated)?
          <== isSubType Any <:< Nothing (left is approximated) = false
        <== isSubType Any <:< X (left is approximated) = false
        ==> isSubType Any <:< X?
          ==> isSubType Any <:< Nothing?
          <== isSubType Any <:< Nothing = false
        <== isSubType Any <:< X = false
      <== isSubType X <:< X = false
      ==> isSubType X <:< Any?
      <== isSubType X <:< Any = true
    <== isSubType X <:< X = true
  <== isSubType X <:< X = true
  ==> isSubType X <:< X?
    ==> isSubType X <:< X?
      ==> isSubType Any <:< X?
        ==> isSubType Any <:< Nothing?
        <== isSubType Any <:< Nothing = false
      <== isSubType Any <:< X = false
    <== isSubType X <:< X = true
  <== isSubType X <:< X = true
<== isSubType Id[X] <:< Id[X] = true
==> isSubType ImpureFunction1 <:< AnyTypeConstructorProto?
<== isSubType ImpureFunction1 <:< AnyTypeConstructorProto = true
==> isSubType (op : X => T) <:< ?{ apply: ? }?
  ==> isSubType (op.apply : (v1: X): T) <:< ??
  <== isSubType (op.apply : (v1: X): T) <:< ? = true
<== isSubType (op : X => T) <:< ?{ apply: ? } = true
==> isSubType (x : X) <:< X?
  ==> isSubType (x : X) <:< Nothing?
    ==> isSubType X <:< Nothing (left is approximated)?
      ==> isSubType Any <:< Nothing (left is approximated)?
      <== isSubType Any <:< Nothing (left is approximated) = false
      ==> isSubType Any <:< Nothing?
      <== isSubType Any <:< Nothing = false
    <== isSubType X <:< Nothing (left is approximated) = false
  <== isSubType (x : X) <:< Nothing = false
  ==> isSubType X <:< X (left is approximated)?
  <== isSubType X <:< X (left is approximated) = true
<== isSubType (x : X) <:< X = true
==> isSubType (x : X) <:< X?
  ==> isSubType (x : X) <:< Nothing?
    ==> isSubType X <:< Nothing (left is approximated)?
      ==> isSubType Any <:< Nothing (left is approximated)?
      <== isSubType Any <:< Nothing (left is approximated) = false
      ==> isSubType Any <:< Nothing?
      <== isSubType Any <:< Nothing = false
    <== isSubType X <:< Nothing (left is approximated) = false
  <== isSubType (x : X) <:< Nothing = false
  ==> isSubType X <:< X (left is approximated)?
  <== isSubType X <:< X (left is approximated) = true
<== isSubType (x : X) <:< X = true
==> isSubType [T] => (op: X => T) -> T <:< [T] => (op: X => T) -> T?
  ==> isSubType [T] => (op: X => T) -> T <:< PolyFunction?
    ==> isSubType PolyFunction <:< PolyFunction?
    <== isSubType PolyFunction <:< PolyFunction = true
  <== isSubType [T] => (op: X => T) -> T <:< PolyFunction = true
  ==> isSubType [T](op: X => T): T <:< [T](op: X => T): T?
    ==> isSubType  <:< ?
    <== isSubType  <:<  = true
    ==> isSubType (op: X => T): T <:< (op: X => T): T?
      ==> isSubType T <:< T?
      <== isSubType T <:< T = true
    <== isSubType (op: X => T): T <:< (op: X => T): T = true
  <== isSubType [T](op: X => T): T <:< [T](op: X => T): T = true
<== isSubType [T] => (op: X => T) -> T <:< [T] => (op: X => T) -> T = true
==> isSubType [T] => (op: X => T) -> T <:< [T] => (op: X => T) -> T?
  ==> isSubType [T] => (op: X => T) -> T <:< PolyFunction?
    ==> isSubType PolyFunction <:< PolyFunction?
    <== isSubType PolyFunction <:< PolyFunction = true
  <== isSubType [T] => (op: X => T) -> T <:< PolyFunction = true
  ==> isSubType [T](op: X => T): T <:< [T](op: X => T): T?
    ==> isSubType  <:< ?
    <== isSubType  <:<  = true
    ==> isSubType (op: X => T): T <:< (op: X => T): T?
      ==> isSubType T <:< T?
      <== isSubType T <:< T = true
    <== isSubType (op: X => T): T <:< (op: X => T): T = true
  <== isSubType [T](op: X => T): T <:< [T](op: X => T): T = true
<== isSubType [T] => (op: X => T) -> T <:< [T] => (op: X => T) -> T = true
==> isSubType [T] => (op: X => T) -> T <:< [T] => (op: X => T) -> T?
  ==> isSubType [T] => (op: X => T) -> T <:< PolyFunction?
    ==> isSubType PolyFunction <:< PolyFunction?
    <== isSubType PolyFunction <:< PolyFunction = true
  <== isSubType [T] => (op: X => T) -> T <:< PolyFunction = true
  ==> isSubType [T](op: X => T): T <:< [T](op: X => T): T?
    ==> isSubType  <:< ?
    <== isSubType  <:<  = true
    ==> isSubType (op: X => T): T <:< (op: X => T): T?
      ==> isSubType T <:< T?
      <== isSubType T <:< T = true
    <== isSubType (op: X => T): T <:< (op: X => T): T = true
  <== isSubType [T](op: X => T): T <:< [T](op: X => T): T = true
<== isSubType [T] => (op: X => T) -> T <:< [T] => (op: X => T) -> T = true
==> isSubType scala.caps.type <:< ?{ Capability: ? }?
  ==> isSubType scala.caps.Capability <:< ??
  <== isSubType scala.caps.Capability <:< ? = true
<== isSubType scala.caps.type <:< ?{ Capability: ? } = true
==> isSubType ImpureFunction1 <:< AnyTypeConstructorProto?
<== isSubType ImpureFunction1 <:< AnyTypeConstructorProto = true
==> isSubType _root_.type <:< ?{ scala: ? }?
  ==> isSubType scala.type <:< ??
  <== isSubType scala.type <:< ? = true
<== isSubType _root_.type <:< ?{ scala: ? } = true
==> isSubType scala.type <:< ?{ annotation: ? }?
  ==> isSubType scala.annotation.type <:< ??
  <== isSubType scala.annotation.type <:< ? = true
<== isSubType scala.type <:< ?{ annotation: ? } = true
==> isSubType scala.annotation.type <:< ?{ retains: ? }?
  ==> isSubType scala.annotation.retains <:< ??
  <== isSubType scala.annotation.retains <:< ? = true
<== isSubType scala.annotation.type <:< ?{ retains: ? } = true
==> isSubType (lcap : scala.caps.Capability) <:< Any @retainsArg?
  ==> isSubType (lcap : scala.caps.Capability) <:< Any?
  <== isSubType (lcap : scala.caps.Capability) <:< Any = true
<== isSubType (lcap : scala.caps.Capability) <:< Any @retainsArg = true
==> isSubType (lcap : scala.caps.Capability) <:< Any @retainsArg?
  ==> isSubType (lcap : scala.caps.Capability) <:< Any?
  <== isSubType (lcap : scala.caps.Capability) <:< Any = true
<== isSubType (lcap : scala.caps.Capability) <:< Any @retainsArg = true
==> isSubType ("cap is used" : String) <:< Any?
<== isSubType ("cap is used" : String) <:< Any = true
==> isSubType ("cap is used" : String) <:< Any?
<== isSubType ("cap is used" : String) <:< Any = true
==> isSubType (0 : Int) <:< Int?
  ==> isSubType Int <:< Int (left is approximated)?
    ==> isSubType (scala : scala.type) <:< scala.type?
    <== isSubType (scala : scala.type) <:< scala.type = true
  <== isSubType Int <:< Int (left is approximated) = true
<== isSubType (0 : Int) <:< Int = true
==> isSubType (0 : Int) <:< Int?
  ==> isSubType Int <:< Int (left is approximated)?
    ==> isSubType (scala : scala.type) <:< scala.type?
    <== isSubType (scala : scala.type) <:< scala.type = true
  <== isSubType Int <:< Int (left is approximated) = true
<== isSubType (0 : Int) <:< Int = true
==> isSubType Object with Cap {...} <:< Cap?
  ==> isSubType Cap <:< Cap (left is approximated)?
  <== isSubType Cap <:< Cap (left is approximated) = true
<== isSubType Object with Cap {...} <:< Cap = true
==> isSubType Object with Cap {...} <:< Cap?
  ==> isSubType Cap <:< Cap (left is approximated)?
  <== isSubType Cap <:< Cap (left is approximated) = true
<== isSubType Object with Cap {...} <:< Cap = true
==> isSubType (): Int <:< (): Int?
  ==> isSubType Int <:< Int?
  <== isSubType Int <:< Int = true
<== isSubType (): Int <:< (): Int = true
==> isSubType (): Int <:< (): Int?
  ==> isSubType Int <:< Int?
  <== isSubType Int <:< Int = true
<== isSubType (): Int <:< (): Int = true
==> isSubType Object & Cap <:< Cap?
  ==> isSubType Cap <:< Cap (left is approximated)?
  <== isSubType Cap <:< Cap (left is approximated) = true
<== isSubType Object & Cap <:< Cap = true
==> isSubType Cap <:< Object?
  ==> isSubType Object <:< Object (left is approximated)?
  <== isSubType Object <:< Object (left is approximated) = true
<== isSubType Cap <:< Object = true
==> isSubType Object with Cap {...} <:< Cap?
  ==> isSubType Cap <:< Cap (left is approximated)?
  <== isSubType Cap <:< Cap (left is approximated) = true
<== isSubType Object with Cap {...} <:< Cap = true
==> isSubType (op : (lcap: scala.caps.Capability) ?-> Cap^{lcap} => X) <:< ?{ apply: ? }?
  ==> isSubType (using x$0: scala.caps.Capability): Cap^{} => X <:< (using lcap: scala.caps.Capability): Cap^{lcap} => X?
    ==> isSubType Cap^{} => X <:< Cap^{x$0} => X?
      ==> isSubType Cap^{x$0} <:< Cap^{}?
        ==> isSubType Cap^{x$0} <:< Cap?
          ==> isSubType Cap <:< Cap?
          <== isSubType Cap <:< Cap = true
        <== isSubType Cap^{x$0} <:< Cap = true
      <== isSubType Cap^{x$0} <:< Cap^{} = true
      ==> isSubType X <:< X?
      <== isSubType X <:< X = true
    <== isSubType Cap^{} => X <:< Cap^{x$0} => X = true
  <== isSubType (using x$0: scala.caps.Capability): Cap^{} => X <:< (using lcap: scala.caps.Capability): Cap^{lcap} => X = true
  ==> isSubType (using lcap: scala.caps.Capability): Cap^{lcap} => X <:< (using x$0: scala.caps.Capability): Cap^{} => X?
    ==> isSubType Cap^{lcap} => X <:< Cap^{} => X?
      ==> isSubType Cap^{} <:< Cap^{lcap}?
        ==> isSubType Cap^{} <:< Cap?
          ==> isSubType Cap <:< Cap?
          <== isSubType Cap <:< Cap = true
        <== isSubType Cap^{} <:< Cap = true
      <== isSubType Cap^{} <:< Cap^{lcap} = true
      ==> isSubType X <:< X?
      <== isSubType X <:< X = true
    <== isSubType Cap^{lcap} => X <:< Cap^{} => X = true
  <== isSubType (using lcap: scala.caps.Capability): Cap^{lcap} => X <:< (using x$0: scala.caps.Capability): Cap^{} => X = true
  ==> isSubType Cap^{<? = scala.caps.Capability>} => X <:< ??
  <== isSubType Cap^{<? = scala.caps.Capability>} => X <:< ? = true
<== isSubType (op : (lcap: scala.caps.Capability) ?-> Cap^{lcap} => X) <:< ?{ apply: ? } = true
==> isSubType (using x$0: scala.caps.Capability): Cap^{} => X <:< (using lcap: scala.caps.Capability): Cap^{lcap} => X?
  ==> isSubType Cap^{} => X <:< Cap^{x$0} => X?
    ==> isSubType Cap^{x$0} <:< Cap^{}?
      ==> isSubType Cap^{x$0} <:< Cap?
        ==> isSubType Cap <:< Cap?
        <== isSubType Cap <:< Cap = true
      <== isSubType Cap^{x$0} <:< Cap = true
    <== isSubType Cap^{x$0} <:< Cap^{} = true
    ==> isSubType X <:< X?
    <== isSubType X <:< X = true
  <== isSubType Cap^{} => X <:< Cap^{x$0} => X = true
<== isSubType (using x$0: scala.caps.Capability): Cap^{} => X <:< (using lcap: scala.caps.Capability): Cap^{lcap} => X = true
==> isSubType (using lcap: scala.caps.Capability): Cap^{lcap} => X <:< (using x$0: scala.caps.Capability): Cap^{} => X?
  ==> isSubType Cap^{lcap} => X <:< Cap^{} => X?
    ==> isSubType Cap^{} <:< Cap^{lcap}?
      ==> isSubType Cap^{} <:< Cap?
        ==> isSubType Cap <:< Cap?
        <== isSubType Cap <:< Cap = true
      <== isSubType Cap^{} <:< Cap = true
    <== isSubType Cap^{} <:< Cap^{lcap} = true
    ==> isSubType X <:< X?
    <== isSubType X <:< X = true
  <== isSubType Cap^{lcap} => X <:< Cap^{} => X = true
<== isSubType (using lcap: scala.caps.Capability): Cap^{lcap} => X <:< (using x$0: scala.caps.Capability): Cap^{} => X = true
==> isSubType scala.caps.type <:< ?{ cap: ? }?
  ==> isSubType cap <:< ??
  <== isSubType cap <:< ? = true
<== isSubType scala.caps.type <:< ?{ cap: ? } = true
==> isSubType cap <:< scala.caps.Capability?
  ==> isSubType scala.caps.Capability <:< scala.caps.Capability (left is approximated)?
    ==> isSubType (scala.caps : scala.caps.type) <:< scala.caps.type?
    <== isSubType (scala.caps : scala.caps.type) <:< scala.caps.type = true
  <== isSubType scala.caps.Capability <:< scala.caps.Capability (left is approximated) = true
<== isSubType cap <:< scala.caps.Capability = true
==> isSubType cap <:< scala.caps.Capability?
  ==> isSubType scala.caps.Capability <:< scala.caps.Capability (left is approximated)?
    ==> isSubType (scala.caps : scala.caps.type) <:< scala.caps.type?
    <== isSubType (scala.caps : scala.caps.type) <:< scala.caps.type = true
  <== isSubType scala.caps.Capability <:< scala.caps.Capability (left is approximated) = true
<== isSubType cap <:< scala.caps.Capability = true
==> isSubType cap <:< (param)1?
  ==> isSubType cap <:< (param)1?
    ==> isSubType cap <:< (param)1?
      ==> isSubType cap <:< Nothing?
        ==> isSubType scala.caps.cap <:< Nothing (left is approximated)?
        <== isSubType scala.caps.cap <:< Nothing (left is approximated) = false
      <== isSubType cap <:< Nothing = false
      ==> isSubType scala.caps.cap <:< (param)1 (left is approximated)?
        ==> isSubType scala.caps.cap <:< Nothing (left is approximated)?
        <== isSubType scala.caps.cap <:< Nothing (left is approximated) = false
      <== isSubType scala.caps.cap <:< (param)1 (left is approximated) = false
    <== isSubType cap <:< (param)1 = false
    ==> isSubType cap <:< scala.caps.Capability & Singleton?
      ==> isSubType cap <:< scala.caps.Capability?
        ==> isSubType scala.caps.Capability <:< scala.caps.Capability (left is approximated)?
          ==> isSubType (scala.caps : scala.caps.type) <:< scala.caps.type?
          <== isSubType (scala.caps : scala.caps.type) <:< scala.caps.type = true
        <== isSubType scala.caps.Capability <:< scala.caps.Capability (left is approximated) = true
      <== isSubType cap <:< scala.caps.Capability = true
      ==> isSubType cap <:< Singleton?
      <== isSubType cap <:< Singleton = true
    <== isSubType cap <:< scala.caps.Capability & Singleton = true
  <== isSubType cap <:< (param)1 = true
<== isSubType cap <:< (param)1 = true
==> isSubType Cap^ => X <:< ?{ apply: ? }?
  ==> isSubType ((Cap^ => X)#apply : (v1: Cap^): X) <:< ??
  <== isSubType ((Cap^ => X)#apply : (v1: Cap^): X) <:< ? = true
<== isSubType Cap^ => X <:< ?{ apply: ? } = true
==> isSubType (cap : Cap) <:< Cap^?
  ==> isSubType (cap : Cap) <:< Cap?
    ==> isSubType Cap <:< Cap (left is approximated)?
    <== isSubType Cap <:< Cap (left is approximated) = true
  <== isSubType (cap : Cap) <:< Cap = true
<== isSubType (cap : Cap) <:< Cap^ = true
==> isSubType (cap : Cap) <:< Cap^?
  ==> isSubType (cap : Cap) <:< Cap?
    ==> isSubType Cap <:< Cap (left is approximated)?
    <== isSubType Cap <:< Cap (left is approximated) = true
  <== isSubType (cap : Cap) <:< Cap = true
<== isSubType (cap : Cap) <:< Cap^ = true
==> isSubType (result : X) <:< X?
  ==> isSubType (result : X) <:< Nothing?
    ==> isSubType X <:< Nothing (left is approximated)?
      ==> isSubType Any <:< Nothing (left is approximated)?
      <== isSubType Any <:< Nothing (left is approximated) = false
      ==> isSubType Any <:< Nothing?
      <== isSubType Any <:< Nothing = false
    <== isSubType X <:< Nothing (left is approximated) = false
  <== isSubType (result : X) <:< Nothing = false
  ==> isSubType X <:< X (left is approximated)?
  <== isSubType X <:< X (left is approximated) = true
<== isSubType (result : X) <:< X = true
==> isSubType (result : X) <:< X?
  ==> isSubType (result : X) <:< Nothing?
    ==> isSubType X <:< Nothing (left is approximated)?
      ==> isSubType Any <:< Nothing (left is approximated)?
      <== isSubType Any <:< Nothing (left is approximated) = false
      ==> isSubType Any <:< Nothing?
      <== isSubType Any <:< Nothing = false
    <== isSubType X <:< Nothing (left is approximated) = false
  <== isSubType (result : X) <:< Nothing = false
  ==> isSubType X <:< X (left is approximated)?
  <== isSubType X <:< X (left is approximated) = true
<== isSubType (result : X) <:< X = true
==> isSubType (using x$0: scala.caps.Capability): Cap^{} => X <:< (using lcap: scala.caps.Capability): Cap^{lcap} => X?
  ==> isSubType Cap^{} => X <:< Cap^{x$0} => X?
    ==> isSubType Cap^{x$0} <:< Cap^{}?
      ==> isSubType Cap^{x$0} <:< Cap?
        ==> isSubType Cap <:< Cap?
        <== isSubType Cap <:< Cap = true
      <== isSubType Cap^{x$0} <:< Cap = true
    <== isSubType Cap^{x$0} <:< Cap^{} = true
    ==> isSubType X <:< X?
    <== isSubType X <:< X = true
  <== isSubType Cap^{} => X <:< Cap^{x$0} => X = true
<== isSubType (using x$0: scala.caps.Capability): Cap^{} => X <:< (using lcap: scala.caps.Capability): Cap^{lcap} => X = true
==> isSubType (using lcap: scala.caps.Capability): Cap^{lcap} => X <:< (using x$0: scala.caps.Capability): Cap^{} => X?
  ==> isSubType Cap^{lcap} => X <:< Cap^{} => X?
    ==> isSubType Cap^{} <:< Cap^{lcap}?
      ==> isSubType Cap^{} <:< Cap?
        ==> isSubType Cap <:< Cap?
        <== isSubType Cap <:< Cap = true
      <== isSubType Cap^{} <:< Cap = true
    <== isSubType Cap^{} <:< Cap^{lcap} = true
    ==> isSubType X <:< X?
    <== isSubType X <:< X = true
  <== isSubType Cap^{lcap} => X <:< Cap^{} => X = true
<== isSubType (using lcap: scala.caps.Capability): Cap^{lcap} => X <:< (using x$0: scala.caps.Capability): Cap^{} => X = true
==> isSubType Id[X] <:< X?
  ==> isSubType Id[X] <:< X?
    ==> isSubType Id[X] <:< X?
      ==> isSubType Id[X] <:< Nothing?
      <== isSubType Id[X] <:< Nothing = false
    <== isSubType Id[X] <:< X = false
    ==> isSubType Id[X] <:< Any?
    <== isSubType Id[X] <:< Any = true
  <== isSubType Id[X] <:< X = true
<== isSubType Id[X] <:< X = true
==> isSubType (c : Cap^{lcap}) <:< X?
  ==> isSubType (c : Cap^{lcap}) <:< X?
    ==> isSubType (c : Cap^{lcap}) <:< X?
      ==> isSubType (c : Cap^{lcap}) <:< Nothing?
        ==> isSubType Cap^{lcap} <:< Nothing (left is approximated)?
          ==> isSubType Cap <:< Nothing (left is approximated)?
          <== isSubType Cap <:< Nothing (left is approximated) = false
        <== isSubType Cap^{lcap} <:< Nothing (left is approximated) = false
      <== isSubType (c : Cap^{lcap}) <:< Nothing = false
      ==> isSubType Cap^{lcap} <:< X (left is approximated)?
        ==> isSubType Cap <:< X (left is approximated)?
          ==> isSubType Cap <:< Nothing (left is approximated)?
          <== isSubType Cap <:< Nothing (left is approximated) = false
        <== isSubType Cap <:< X (left is approximated) = false
      <== isSubType Cap^{lcap} <:< X (left is approximated) = false
    <== isSubType (c : Cap^{lcap}) <:< X = false
    ==> isSubType (c : Cap^{lcap}) <:< Any?
    <== isSubType (c : Cap^{lcap}) <:< Any = true
  <== isSubType (c : Cap^{lcap}) <:< X = true
<== isSubType (c : Cap^{lcap}) <:< X = true
==> isSubType (c : Cap^{lcap}) <:< X?
  ==> isSubType (c : Cap^{lcap}) <:< X?
    ==> isSubType (c : Cap^{lcap}) <:< X?
      ==> isSubType (c : Cap^{lcap}) <:< (c : Cap^{lcap})?
      <== isSubType (c : Cap^{lcap}) <:< (c : Cap^{lcap}) = true
    <== isSubType (c : Cap^{lcap}) <:< X = true
  <== isSubType (c : Cap^{lcap}) <:< X = true
<== isSubType (c : Cap^{lcap}) <:< X = true
==> isSubType Id[X] <:< X?
  ==> isSubType Id[X] <:< X?
    ==> isSubType Id[X] <:< X?
      ==> isSubType Id[X] <:< Id[X]?
      <== isSubType Id[X] <:< Id[X] = true
    <== isSubType Id[X] <:< X = true
  <== isSubType Id[X] <:< X = true
<== isSubType Id[X] <:< X = true
==> isSubType Id[X] <:< X?
  ==> isSubType Id[X] <:< X?
    ==> isSubType Id[X] <:< X?
      ==> isSubType Id[X] <:< Id[X]?
      <== isSubType Id[X] <:< Id[X] = true
    <== isSubType Id[X] <:< X = true
  <== isSubType Id[X] <:< X = true
<== isSubType Id[X] <:< X = true
==> isSubType Id[X] <:< X?
  ==> isSubType Id[X] <:< X?
    ==> isSubType Id[X] <:< X?
      ==> isSubType Id[X] <:< Id[X]?
      <== isSubType Id[X] <:< Id[X] = true
    <== isSubType Id[X] <:< X = true
  <== isSubType Id[X] <:< X = true
<== isSubType Id[X] <:< X = true
==> isSubType Cap^{lcap} <:< X?
  ==> isSubType Cap <:< X?
    ==> isSubType Cap <:< X?
      ==> isSubType Cap <:< (c : Cap^{lcap})?
      <== isSubType Cap <:< (c : Cap^{lcap}) = false
    <== isSubType Cap <:< X = false
    ==> isSubType (c : Cap^{lcap}) <:< Cap?
      ==> isSubType Cap <:< Cap (left is approximated)?
      <== isSubType Cap <:< Cap (left is approximated) = true
    <== isSubType (c : Cap^{lcap}) <:< Cap = true
    ==> isSubType Cap <:< Any?
    <== isSubType Cap <:< Any = true
  <== isSubType Cap <:< X = true
<== isSubType Cap^{lcap} <:< X = true
==> isSubType Id[X] <:< X?
  ==> isSubType Id[X] <:< X?
    ==> isSubType Id[X] <:< X?
      ==> isSubType Id[X] <:< Id[X]?
      <== isSubType Id[X] <:< Id[X] = true
    <== isSubType Id[X] <:< X = true
  <== isSubType Id[X] <:< X = true
<== isSubType Id[X] <:< X = true
==> isSubType Id[X] <:< X?
  ==> isSubType Id[X] <:< X?
    ==> isSubType Id[X] <:< X?
      ==> isSubType Id[X] <:< Id[X]?
      <== isSubType Id[X] <:< Id[X] = true
    <== isSubType Id[X] <:< X = true
  <== isSubType Id[X] <:< X = true
<== isSubType Id[X] <:< X = true
==> isSubType Cap^{lcap} -> X <:< Cap^{lcap} => X?
  ==> isSubType Cap^{lcap} -> X <:< Cap^{lcap} => X?
    ==> isSubType Cap^{lcap} -> X <:< Cap^{lcap} -> X?
    <== isSubType Cap^{lcap} -> X <:< Cap^{lcap} -> X = true
  <== isSubType Cap^{lcap} -> X <:< Cap^{lcap} => X = true
<== isSubType Cap^{lcap} -> X <:< Cap^{lcap} => X = true
==> isSubType Cap^{lcap} -> X <:< Cap^{lcap} => X?
  ==> isSubType Cap^{lcap} -> X <:< Cap^{lcap} => X?
    ==> isSubType Cap^{lcap} -> X <:< Cap^{lcap} -> X?
    <== isSubType Cap^{lcap} -> X <:< Cap^{lcap} -> X = true
  <== isSubType Cap^{lcap} -> X <:< Cap^{lcap} => X = true
<== isSubType Cap^{lcap} -> X <:< Cap^{lcap} => X = true
==> isSubType Cap^{lcap} -> X <:< Cap^{lcap} => X?
  ==> isSubType Cap^{lcap} -> X <:< Cap^{lcap} => X?
    ==> isSubType Cap^{lcap} -> X <:< Cap^{lcap} -> X?
    <== isSubType Cap^{lcap} -> X <:< Cap^{lcap} -> X = true
  <== isSubType Cap^{lcap} -> X <:< Cap^{lcap} => X = true
<== isSubType Cap^{lcap} -> X <:< Cap^{lcap} => X = true
==> isSubType Cap^{lcap} -> X <:< Cap^{lcap} => X?
  ==> isSubType Cap^{lcap} -> X <:< Cap^{lcap} => X?
    ==> isSubType Cap^{lcap} -> X <:< Cap^{lcap} -> X?
    <== isSubType Cap^{lcap} -> X <:< Cap^{lcap} -> X = true
  <== isSubType Cap^{lcap} -> X <:< Cap^{lcap} => X = true
<== isSubType Cap^{lcap} -> X <:< Cap^{lcap} => X = true
==> isSubType Id[X] <:< Nothing?
<== isSubType Id[X] <:< Nothing = false
==> isSubType Any <:< Any?
<== isSubType Any <:< Any = true
==> isSubType Cap <:< Nothing?
<== isSubType Cap <:< Nothing = false
==> isSubType Any <:< Any?
<== isSubType Any <:< Any = true
==> isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{lcap} -> Id[Cap]?
  ==> isSubType Cap^{lcap} <:< Cap^{lcap}?
  <== isSubType Cap^{lcap} <:< Cap^{lcap} = true
  ==> isSubType Id[Cap] <:< Id[Cap]?
    ==> isSubType Id[Cap] <:< Id[Cap]?
      ==> isSubType Cap <:< Cap?
        ==> isSubType Cap <:< Cap?
        <== isSubType Cap <:< Cap = true
      <== isSubType Cap <:< Cap = true
      ==> isSubType Cap <:< Cap?
        ==> isSubType Cap <:< Cap?
        <== isSubType Cap <:< Cap = true
      <== isSubType Cap <:< Cap = true
    <== isSubType Id[Cap] <:< Id[Cap] = true
  <== isSubType Id[Cap] <:< Id[Cap] = true
<== isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{lcap} -> Id[Cap] = true
==> isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{lcap} -> Id[Cap]?
  ==> isSubType Cap^{lcap} <:< Cap^{lcap}?
  <== isSubType Cap^{lcap} <:< Cap^{lcap} = true
  ==> isSubType Id[Cap] <:< Id[Cap]?
    ==> isSubType Id[Cap] <:< Id[Cap]?
      ==> isSubType Cap <:< Cap?
        ==> isSubType Cap <:< Cap?
        <== isSubType Cap <:< Cap = true
      <== isSubType Cap <:< Cap = true
      ==> isSubType Cap <:< Cap?
        ==> isSubType Cap <:< Cap?
        <== isSubType Cap <:< Cap = true
      <== isSubType Cap <:< Cap = true
    <== isSubType Id[Cap] <:< Id[Cap] = true
  <== isSubType Id[Cap] <:< Id[Cap] = true
<== isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{lcap} -> Id[Cap] = true
==> isSubType (using x$0: scala.caps.Capability): Cap^{} => Id[Cap] <:< (using lcap: scala.caps.Capability): Cap^{lcap} => Id[Cap]?
  ==> isSubType Cap^{} => Id[Cap] <:< Cap^{x$0} => Id[Cap]?
    ==> isSubType Cap^{x$0} <:< Cap^{}?
      ==> isSubType Cap^{x$0} <:< Cap?
        ==> isSubType Cap <:< Cap?
        <== isSubType Cap <:< Cap = true
      <== isSubType Cap^{x$0} <:< Cap = true
    <== isSubType Cap^{x$0} <:< Cap^{} = true
    ==> isSubType Id[Cap] <:< Id[Cap]?
    <== isSubType Id[Cap] <:< Id[Cap] = true
  <== isSubType Cap^{} => Id[Cap] <:< Cap^{x$0} => Id[Cap] = true
<== isSubType (using x$0: scala.caps.Capability): Cap^{} => Id[Cap] <:< (using lcap: scala.caps.Capability): Cap^{lcap} => Id[Cap] = true
==> isSubType (using lcap: scala.caps.Capability): Cap^{lcap} => Id[Cap] <:< (using x$0: scala.caps.Capability): Cap^{} => Id[Cap]?
  ==> isSubType Cap^{lcap} => Id[Cap] <:< Cap^{} => Id[Cap]?
    ==> isSubType Cap^{} <:< Cap^{lcap}?
      ==> isSubType Cap^{} <:< Cap?
        ==> isSubType Cap <:< Cap?
        <== isSubType Cap <:< Cap = true
      <== isSubType Cap^{} <:< Cap = true
    <== isSubType Cap^{} <:< Cap^{lcap} = true
    ==> isSubType Id[Cap] <:< Id[Cap]?
      ==> isSubType Id[Cap] <:< Id[Cap]?
        ==> isSubType Cap <:< Cap?
          ==> isSubType Cap <:< Cap?
          <== isSubType Cap <:< Cap = true
        <== isSubType Cap <:< Cap = true
        ==> isSubType Cap <:< Cap?
          ==> isSubType Cap <:< Cap?
          <== isSubType Cap <:< Cap = true
        <== isSubType Cap <:< Cap = true
      <== isSubType Id[Cap] <:< Id[Cap] = true
    <== isSubType Id[Cap] <:< Id[Cap] = true
  <== isSubType Cap^{lcap} => Id[Cap] <:< Cap^{} => Id[Cap] = true
<== isSubType (using lcap: scala.caps.Capability): Cap^{lcap} => Id[Cap] <:< (using x$0: scala.caps.Capability): Cap^{} => Id[Cap] = true
==> isSubType (using x$0: scala.caps.Capability): Cap^{} => Id[Cap] <:< (using lcap: scala.caps.Capability): Cap^{lcap} => Id[Cap]?
  ==> isSubType Cap^{} => Id[Cap] <:< Cap^{x$0} => Id[Cap]?
    ==> isSubType Cap^{x$0} <:< Cap^{}?
      ==> isSubType Cap^{x$0} <:< Cap?
        ==> isSubType Cap <:< Cap?
        <== isSubType Cap <:< Cap = true
      <== isSubType Cap^{x$0} <:< Cap = true
    <== isSubType Cap^{x$0} <:< Cap^{} = true
    ==> isSubType Id[Cap] <:< Id[Cap]?
    <== isSubType Id[Cap] <:< Id[Cap] = true
  <== isSubType Cap^{} => Id[Cap] <:< Cap^{x$0} => Id[Cap] = true
<== isSubType (using x$0: scala.caps.Capability): Cap^{} => Id[Cap] <:< (using lcap: scala.caps.Capability): Cap^{lcap} => Id[Cap] = true
==> isSubType (using lcap: scala.caps.Capability): Cap^{lcap} => Id[Cap] <:< (using x$0: scala.caps.Capability): Cap^{} => Id[Cap]?
  ==> isSubType Cap^{lcap} => Id[Cap] <:< Cap^{} => Id[Cap]?
    ==> isSubType Cap^{} <:< Cap^{lcap}?
      ==> isSubType Cap^{} <:< Cap?
        ==> isSubType Cap <:< Cap?
        <== isSubType Cap <:< Cap = true
      <== isSubType Cap^{} <:< Cap = true
    <== isSubType Cap^{} <:< Cap^{lcap} = true
    ==> isSubType Id[Cap] <:< Id[Cap]?
      ==> isSubType Id[Cap] <:< Id[Cap]?
        ==> isSubType Cap <:< Cap?
          ==> isSubType Cap <:< Cap?
          <== isSubType Cap <:< Cap = true
        <== isSubType Cap <:< Cap = true
        ==> isSubType Cap <:< Cap?
          ==> isSubType Cap <:< Cap?
          <== isSubType Cap <:< Cap = true
        <== isSubType Cap <:< Cap = true
      <== isSubType Id[Cap] <:< Id[Cap] = true
    <== isSubType Id[Cap] <:< Id[Cap] = true
  <== isSubType Cap^{lcap} => Id[Cap] <:< Cap^{} => Id[Cap] = true
<== isSubType (using lcap: scala.caps.Capability): Cap^{lcap} => Id[Cap] <:< (using x$0: scala.caps.Capability): Cap^{} => Id[Cap] = true
==> isSubType (using x$0: scala.caps.Capability): Cap^{} => Id[Cap] <:< (using lcap: scala.caps.Capability): Cap^{lcap} => Id[Cap]?
  ==> isSubType Cap^{} => Id[Cap] <:< Cap^{x$0} => Id[Cap]?
    ==> isSubType Cap^{x$0} <:< Cap^{}?
      ==> isSubType Cap^{x$0} <:< Cap?
        ==> isSubType Cap <:< Cap?
        <== isSubType Cap <:< Cap = true
      <== isSubType Cap^{x$0} <:< Cap = true
    <== isSubType Cap^{x$0} <:< Cap^{} = true
    ==> isSubType Id[Cap] <:< Id[Cap]?
    <== isSubType Id[Cap] <:< Id[Cap] = true
  <== isSubType Cap^{} => Id[Cap] <:< Cap^{x$0} => Id[Cap] = true
<== isSubType (using x$0: scala.caps.Capability): Cap^{} => Id[Cap] <:< (using lcap: scala.caps.Capability): Cap^{lcap} => Id[Cap] = true
==> isSubType (using lcap: scala.caps.Capability): Cap^{lcap} => Id[Cap] <:< (using x$0: scala.caps.Capability): Cap^{} => Id[Cap]?
  ==> isSubType Cap^{lcap} => Id[Cap] <:< Cap^{} => Id[Cap]?
    ==> isSubType Cap^{} <:< Cap^{lcap}?
      ==> isSubType Cap^{} <:< Cap?
        ==> isSubType Cap <:< Cap?
        <== isSubType Cap <:< Cap = true
      <== isSubType Cap^{} <:< Cap = true
    <== isSubType Cap^{} <:< Cap^{lcap} = true
    ==> isSubType Id[Cap] <:< Id[Cap]?
      ==> isSubType Id[Cap] <:< Id[Cap]?
        ==> isSubType Cap <:< Cap?
          ==> isSubType Cap <:< Cap?
          <== isSubType Cap <:< Cap = true
        <== isSubType Cap <:< Cap = true
        ==> isSubType Cap <:< Cap?
          ==> isSubType Cap <:< Cap?
          <== isSubType Cap <:< Cap = true
        <== isSubType Cap <:< Cap = true
      <== isSubType Id[Cap] <:< Id[Cap] = true
    <== isSubType Id[Cap] <:< Id[Cap] = true
  <== isSubType Cap^{lcap} => Id[Cap] <:< Cap^{} => Id[Cap] = true
<== isSubType (using lcap: scala.caps.Capability): Cap^{lcap} => Id[Cap] <:< (using x$0: scala.caps.Capability): Cap^{} => Id[Cap] = true
==> isSubType (scala.caps.Capability) ?-> Cap^{} => Id[Cap] <:< (lcap: scala.caps.Capability) ?-> Cap^{lcap} => Id[Cap]?
  ==> isSubType (scala.caps.Capability) ?-> Cap^{} => Id[Cap] <:< (scala.caps.Capability) ?-> Cap^{} => Id[Cap]?
  <== isSubType (scala.caps.Capability) ?-> Cap^{} => Id[Cap] <:< (scala.caps.Capability) ?-> Cap^{} => Id[Cap] = true
  ==> isSubType scala.caps.Capability <:< scala.caps.Capability?
  <== isSubType scala.caps.Capability <:< scala.caps.Capability = true
  ==> isSubType Cap^{} => Id[Cap] <:< Cap^{x$0} => Id[Cap]?
    ==> isSubType Cap^{x$0} <:< Cap^{}?
      ==> isSubType Cap^{x$0} <:< Cap?
        ==> isSubType Cap <:< Cap?
        <== isSubType Cap <:< Cap = true
      <== isSubType Cap^{x$0} <:< Cap = true
    <== isSubType Cap^{x$0} <:< Cap^{} = true
    ==> isSubType Id[Cap] <:< Id[Cap]?
    <== isSubType Id[Cap] <:< Id[Cap] = true
  <== isSubType Cap^{} => Id[Cap] <:< Cap^{x$0} => Id[Cap] = true
<== isSubType (scala.caps.Capability) ?-> Cap^{} => Id[Cap] <:< (lcap: scala.caps.Capability) ?-> Cap^{lcap} => Id[Cap] = true
==> isSubType (lcap: scala.caps.Capability) ?-> Cap^{lcap} -> Id[Cap] <:< (lcap: scala.caps.Capability) ?-> Cap^{lcap} => Id[Cap]?
  ==> isSubType (lcap: scala.caps.Capability) ?-> Cap^{lcap} -> Id[Cap] <:< (scala.caps.Capability) ?-> Cap^{} => Id[Cap]?
    ==> isSubType (scala.caps.Capability) ?-> Cap^{} -> Id[Cap] <:< (scala.caps.Capability) ?-> Cap^{} => Id[Cap]?
      ==> isSubType scala.caps.Capability <:< scala.caps.Capability?
      <== isSubType scala.caps.Capability <:< scala.caps.Capability = true
      ==> isSubType Cap^{} -> Id[Cap] <:< Cap^{} => Id[Cap]?
        ==> isSubType Cap^{} -> Id[Cap] <:< Cap^{} => Id[Cap]?
          ==> isSubType Cap^{} -> Id[Cap] <:< Cap^{} -> Id[Cap]?
            ==> isSubType Cap^{} <:< Cap^{}?
              ==> isSubType Cap^{} <:< Cap?
                ==> isSubType Cap <:< Cap?
                <== isSubType Cap <:< Cap = true
              <== isSubType Cap^{} <:< Cap = true
            <== isSubType Cap^{} <:< Cap^{} = true
            ==> isSubType Id[Cap] <:< Id[Cap]?
              ==> isSubType Id[Cap] <:< Id[Cap]?
                ==> isSubType Cap <:< Cap?
                  ==> isSubType Cap <:< Cap?
                  <== isSubType Cap <:< Cap = true
                <== isSubType Cap <:< Cap = true
                ==> isSubType Cap <:< Cap?
                  ==> isSubType Cap <:< Cap?
                  <== isSubType Cap <:< Cap = true
                <== isSubType Cap <:< Cap = true
              <== isSubType Id[Cap] <:< Id[Cap] = true
            <== isSubType Id[Cap] <:< Id[Cap] = true
          <== isSubType Cap^{} -> Id[Cap] <:< Cap^{} -> Id[Cap] = true
        <== isSubType Cap^{} -> Id[Cap] <:< Cap^{} => Id[Cap] = true
      <== isSubType Cap^{} -> Id[Cap] <:< Cap^{} => Id[Cap] = true
    <== isSubType (scala.caps.Capability) ?-> Cap^{} -> Id[Cap] <:< (scala.caps.Capability) ?-> Cap^{} => Id[Cap] = true
  <== isSubType (lcap: scala.caps.Capability) ?-> Cap^{lcap} -> Id[Cap] <:< (scala.caps.Capability) ?-> Cap^{} => Id[Cap] = true
  ==> isSubType (using x$0: scala.caps.Capability): Cap^{} -> Id[Cap] <:< (using lcap: scala.caps.Capability): Cap^{lcap} -> Id[Cap]?
    ==> isSubType Cap^{} -> Id[Cap] <:< Cap^{x$0} -> Id[Cap]?
      ==> isSubType Cap^{x$0} <:< Cap^{}?
        ==> isSubType Cap^{x$0} <:< Cap?
          ==> isSubType Cap <:< Cap?
          <== isSubType Cap <:< Cap = true
        <== isSubType Cap^{x$0} <:< Cap = true
      <== isSubType Cap^{x$0} <:< Cap^{} = true
      ==> isSubType Id[Cap] <:< Id[Cap]?
      <== isSubType Id[Cap] <:< Id[Cap] = true
    <== isSubType Cap^{} -> Id[Cap] <:< Cap^{x$0} -> Id[Cap] = true
  <== isSubType (using x$0: scala.caps.Capability): Cap^{} -> Id[Cap] <:< (using lcap: scala.caps.Capability): Cap^{lcap} -> Id[Cap] = true
  ==> isSubType (using lcap: scala.caps.Capability): Cap^{lcap} -> Id[Cap] <:< (using x$0: scala.caps.Capability): Cap^{} -> Id[Cap]?
    ==> isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{} -> Id[Cap]?
      ==> isSubType Cap^{} <:< Cap^{lcap}?
        ==> isSubType Cap^{} <:< Cap?
          ==> isSubType Cap <:< Cap?
          <== isSubType Cap <:< Cap = true
        <== isSubType Cap^{} <:< Cap = true
      <== isSubType Cap^{} <:< Cap^{lcap} = true
      ==> isSubType Id[Cap] <:< Id[Cap]?
      <== isSubType Id[Cap] <:< Id[Cap] = true
    <== isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{} -> Id[Cap] = true
  <== isSubType (using lcap: scala.caps.Capability): Cap^{lcap} -> Id[Cap] <:< (using x$0: scala.caps.Capability): Cap^{} -> Id[Cap] = true
  ==> isSubType scala.caps.Capability <:< scala.caps.Capability?
  <== isSubType scala.caps.Capability <:< scala.caps.Capability = true
  ==> isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{lcap} => Id[Cap]?
    ==> isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{lcap} => Id[Cap]?
      ==> isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{lcap} -> Id[Cap]?
        ==> isSubType Cap^{lcap} <:< Cap^{lcap}?
          ==> isSubType Cap^{lcap} <:< Cap?
            ==> isSubType Cap <:< Cap?
            <== isSubType Cap <:< Cap = true
          <== isSubType Cap^{lcap} <:< Cap = true
        <== isSubType Cap^{lcap} <:< Cap^{lcap} = true
        ==> isSubType Id[Cap] <:< Id[Cap]?
        <== isSubType Id[Cap] <:< Id[Cap] = true
      <== isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{lcap} -> Id[Cap] = true
    <== isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{lcap} => Id[Cap] = true
  <== isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{lcap} => Id[Cap] = true
<== isSubType (lcap: scala.caps.Capability) ?-> Cap^{lcap} -> Id[Cap] <:< (lcap: scala.caps.Capability) ?-> Cap^{lcap} => Id[Cap] = true
==> isSubType (lcap: scala.caps.Capability) ?-> Cap^{lcap} -> Id[Cap] <:< (lcap: scala.caps.Capability) ?-> Cap^{lcap} => Id[Cap]?
  ==> isSubType (lcap: scala.caps.Capability) ?-> Cap^{lcap} -> Id[Cap] <:< (scala.caps.Capability) ?-> Cap^{} => Id[Cap]?
    ==> isSubType (scala.caps.Capability) ?-> Cap^{} -> Id[Cap] <:< (scala.caps.Capability) ?-> Cap^{} => Id[Cap]?
      ==> isSubType scala.caps.Capability <:< scala.caps.Capability?
      <== isSubType scala.caps.Capability <:< scala.caps.Capability = true
      ==> isSubType Cap^{} -> Id[Cap] <:< Cap^{} => Id[Cap]?
        ==> isSubType Cap^{} -> Id[Cap] <:< Cap^{} => Id[Cap]?
          ==> isSubType Cap^{} -> Id[Cap] <:< Cap^{} -> Id[Cap]?
            ==> isSubType Cap^{} <:< Cap^{}?
              ==> isSubType Cap^{} <:< Cap?
                ==> isSubType Cap <:< Cap?
                <== isSubType Cap <:< Cap = true
              <== isSubType Cap^{} <:< Cap = true
            <== isSubType Cap^{} <:< Cap^{} = true
            ==> isSubType Id[Cap] <:< Id[Cap]?
              ==> isSubType Id[Cap] <:< Id[Cap]?
                ==> isSubType Cap <:< Cap?
                  ==> isSubType Cap <:< Cap?
                  <== isSubType Cap <:< Cap = true
                <== isSubType Cap <:< Cap = true
                ==> isSubType Cap <:< Cap?
                  ==> isSubType Cap <:< Cap?
                  <== isSubType Cap <:< Cap = true
                <== isSubType Cap <:< Cap = true
              <== isSubType Id[Cap] <:< Id[Cap] = true
            <== isSubType Id[Cap] <:< Id[Cap] = true
          <== isSubType Cap^{} -> Id[Cap] <:< Cap^{} -> Id[Cap] = true
        <== isSubType Cap^{} -> Id[Cap] <:< Cap^{} => Id[Cap] = true
      <== isSubType Cap^{} -> Id[Cap] <:< Cap^{} => Id[Cap] = true
    <== isSubType (scala.caps.Capability) ?-> Cap^{} -> Id[Cap] <:< (scala.caps.Capability) ?-> Cap^{} => Id[Cap] = true
  <== isSubType (lcap: scala.caps.Capability) ?-> Cap^{lcap} -> Id[Cap] <:< (scala.caps.Capability) ?-> Cap^{} => Id[Cap] = true
  ==> isSubType (using x$0: scala.caps.Capability): Cap^{} -> Id[Cap] <:< (using lcap: scala.caps.Capability): Cap^{lcap} -> Id[Cap]?
    ==> isSubType Cap^{} -> Id[Cap] <:< Cap^{x$0} -> Id[Cap]?
      ==> isSubType Cap^{x$0} <:< Cap^{}?
        ==> isSubType Cap^{x$0} <:< Cap?
          ==> isSubType Cap <:< Cap?
          <== isSubType Cap <:< Cap = true
        <== isSubType Cap^{x$0} <:< Cap = true
      <== isSubType Cap^{x$0} <:< Cap^{} = true
      ==> isSubType Id[Cap] <:< Id[Cap]?
      <== isSubType Id[Cap] <:< Id[Cap] = true
    <== isSubType Cap^{} -> Id[Cap] <:< Cap^{x$0} -> Id[Cap] = true
  <== isSubType (using x$0: scala.caps.Capability): Cap^{} -> Id[Cap] <:< (using lcap: scala.caps.Capability): Cap^{lcap} -> Id[Cap] = true
  ==> isSubType (using lcap: scala.caps.Capability): Cap^{lcap} -> Id[Cap] <:< (using x$0: scala.caps.Capability): Cap^{} -> Id[Cap]?
    ==> isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{} -> Id[Cap]?
      ==> isSubType Cap^{} <:< Cap^{lcap}?
        ==> isSubType Cap^{} <:< Cap?
          ==> isSubType Cap <:< Cap?
          <== isSubType Cap <:< Cap = true
        <== isSubType Cap^{} <:< Cap = true
      <== isSubType Cap^{} <:< Cap^{lcap} = true
      ==> isSubType Id[Cap] <:< Id[Cap]?
      <== isSubType Id[Cap] <:< Id[Cap] = true
    <== isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{} -> Id[Cap] = true
  <== isSubType (using lcap: scala.caps.Capability): Cap^{lcap} -> Id[Cap] <:< (using x$0: scala.caps.Capability): Cap^{} -> Id[Cap] = true
  ==> isSubType scala.caps.Capability <:< scala.caps.Capability?
  <== isSubType scala.caps.Capability <:< scala.caps.Capability = true
  ==> isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{lcap} => Id[Cap]?
    ==> isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{lcap} => Id[Cap]?
      ==> isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{lcap} -> Id[Cap]?
        ==> isSubType Cap^{lcap} <:< Cap^{lcap}?
          ==> isSubType Cap^{lcap} <:< Cap?
            ==> isSubType Cap <:< Cap?
            <== isSubType Cap <:< Cap = true
          <== isSubType Cap^{lcap} <:< Cap = true
        <== isSubType Cap^{lcap} <:< Cap^{lcap} = true
        ==> isSubType Id[Cap] <:< Id[Cap]?
        <== isSubType Id[Cap] <:< Id[Cap] = true
      <== isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{lcap} -> Id[Cap] = true
    <== isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{lcap} => Id[Cap] = true
  <== isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{lcap} => Id[Cap] = true
<== isSubType (lcap: scala.caps.Capability) ?-> Cap^{lcap} -> Id[Cap] <:< (lcap: scala.caps.Capability) ?-> Cap^{lcap} => Id[Cap] = true
==> isSubType (lcap: scala.caps.Capability) ?-> Cap^{lcap} -> Id[Cap] <:< (lcap: scala.caps.Capability) ?-> Cap^{lcap} => Id[Cap]?
  ==> isSubType (lcap: scala.caps.Capability) ?-> Cap^{lcap} -> Id[Cap] <:< (scala.caps.Capability) ?-> Cap^{} => Id[Cap]?
    ==> isSubType (scala.caps.Capability) ?-> Cap^{} -> Id[Cap] <:< (scala.caps.Capability) ?-> Cap^{} => Id[Cap]?
      ==> isSubType scala.caps.Capability <:< scala.caps.Capability?
      <== isSubType scala.caps.Capability <:< scala.caps.Capability = true
      ==> isSubType Cap^{} -> Id[Cap] <:< Cap^{} => Id[Cap]?
        ==> isSubType Cap^{} -> Id[Cap] <:< Cap^{} => Id[Cap]?
          ==> isSubType Cap^{} -> Id[Cap] <:< Cap^{} -> Id[Cap]?
            ==> isSubType Cap^{} <:< Cap^{}?
              ==> isSubType Cap^{} <:< Cap?
                ==> isSubType Cap <:< Cap?
                <== isSubType Cap <:< Cap = true
              <== isSubType Cap^{} <:< Cap = true
            <== isSubType Cap^{} <:< Cap^{} = true
            ==> isSubType Id[Cap] <:< Id[Cap]?
              ==> isSubType Id[Cap] <:< Id[Cap]?
                ==> isSubType Cap <:< Cap?
                  ==> isSubType Cap <:< Cap?
                  <== isSubType Cap <:< Cap = true
                <== isSubType Cap <:< Cap = true
                ==> isSubType Cap <:< Cap?
                  ==> isSubType Cap <:< Cap?
                  <== isSubType Cap <:< Cap = true
                <== isSubType Cap <:< Cap = true
              <== isSubType Id[Cap] <:< Id[Cap] = true
            <== isSubType Id[Cap] <:< Id[Cap] = true
          <== isSubType Cap^{} -> Id[Cap] <:< Cap^{} -> Id[Cap] = true
        <== isSubType Cap^{} -> Id[Cap] <:< Cap^{} => Id[Cap] = true
      <== isSubType Cap^{} -> Id[Cap] <:< Cap^{} => Id[Cap] = true
    <== isSubType (scala.caps.Capability) ?-> Cap^{} -> Id[Cap] <:< (scala.caps.Capability) ?-> Cap^{} => Id[Cap] = true
  <== isSubType (lcap: scala.caps.Capability) ?-> Cap^{lcap} -> Id[Cap] <:< (scala.caps.Capability) ?-> Cap^{} => Id[Cap] = true
  ==> isSubType (using x$0: scala.caps.Capability): Cap^{} -> Id[Cap] <:< (using lcap: scala.caps.Capability): Cap^{lcap} -> Id[Cap]?
    ==> isSubType Cap^{} -> Id[Cap] <:< Cap^{x$0} -> Id[Cap]?
      ==> isSubType Cap^{x$0} <:< Cap^{}?
        ==> isSubType Cap^{x$0} <:< Cap?
          ==> isSubType Cap <:< Cap?
          <== isSubType Cap <:< Cap = true
        <== isSubType Cap^{x$0} <:< Cap = true
      <== isSubType Cap^{x$0} <:< Cap^{} = true
      ==> isSubType Id[Cap] <:< Id[Cap]?
      <== isSubType Id[Cap] <:< Id[Cap] = true
    <== isSubType Cap^{} -> Id[Cap] <:< Cap^{x$0} -> Id[Cap] = true
  <== isSubType (using x$0: scala.caps.Capability): Cap^{} -> Id[Cap] <:< (using lcap: scala.caps.Capability): Cap^{lcap} -> Id[Cap] = true
  ==> isSubType (using lcap: scala.caps.Capability): Cap^{lcap} -> Id[Cap] <:< (using x$0: scala.caps.Capability): Cap^{} -> Id[Cap]?
    ==> isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{} -> Id[Cap]?
      ==> isSubType Cap^{} <:< Cap^{lcap}?
        ==> isSubType Cap^{} <:< Cap?
          ==> isSubType Cap <:< Cap?
          <== isSubType Cap <:< Cap = true
        <== isSubType Cap^{} <:< Cap = true
      <== isSubType Cap^{} <:< Cap^{lcap} = true
      ==> isSubType Id[Cap] <:< Id[Cap]?
      <== isSubType Id[Cap] <:< Id[Cap] = true
    <== isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{} -> Id[Cap] = true
  <== isSubType (using lcap: scala.caps.Capability): Cap^{lcap} -> Id[Cap] <:< (using x$0: scala.caps.Capability): Cap^{} -> Id[Cap] = true
  ==> isSubType scala.caps.Capability <:< scala.caps.Capability?
  <== isSubType scala.caps.Capability <:< scala.caps.Capability = true
  ==> isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{lcap} => Id[Cap]?
    ==> isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{lcap} => Id[Cap]?
      ==> isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{lcap} -> Id[Cap]?
        ==> isSubType Cap^{lcap} <:< Cap^{lcap}?
          ==> isSubType Cap^{lcap} <:< Cap?
            ==> isSubType Cap <:< Cap?
            <== isSubType Cap <:< Cap = true
          <== isSubType Cap^{lcap} <:< Cap = true
        <== isSubType Cap^{lcap} <:< Cap^{lcap} = true
        ==> isSubType Id[Cap] <:< Id[Cap]?
        <== isSubType Id[Cap] <:< Id[Cap] = true
      <== isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{lcap} -> Id[Cap] = true
    <== isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{lcap} => Id[Cap] = true
  <== isSubType Cap^{lcap} -> Id[Cap] <:< Cap^{lcap} => Id[Cap] = true
<== isSubType (lcap: scala.caps.Capability) ?-> Cap^{lcap} -> Id[Cap] <:< (lcap: scala.caps.Capability) ?-> Cap^{lcap} => Id[Cap] = true
==> isSubType X <:< Any?
<== isSubType X <:< Any = true
==> isSubType Nothing <:< X?
<== isSubType Nothing <:< X = true
==> isSubType T <:< Any?
<== isSubType T <:< Any = true
==> isSubType Nothing <:< T?
<== isSubType Nothing <:< T = true
==> isSubType X <:< Any?
<== isSubType X <:< Any = true
==> isSubType Nothing <:< X?
<== isSubType Nothing <:< X = true
==> isSubType X <:< Any?
<== isSubType X <:< Any = true
==> isSubType Nothing <:< X?
<== isSubType Nothing <:< X = true
==> isSubType T <:< Any?
<== isSubType T <:< Any = true
==> isSubType Nothing <:< T?
<== isSubType Nothing <:< T = true
==> isSubType X <:< Any?
  ==> isSubType X <:< Any?
  <== isSubType X <:< Any = true
<== isSubType X <:< Any = true
==> isSubType Nothing <:< X?
  ==> isSubType Nothing <:< X?
  <== isSubType Nothing <:< X = true
<== isSubType Nothing <:< X = true
==> isSubType scala.caps.Capability <:< Any?
<== isSubType scala.caps.Capability <:< Any = true
==> isSubType Nothing <:< scala.caps.Capability?
<== isSubType Nothing <:< scala.caps.Capability = true
==> isSubType Cap^{} => X <:< Any?
<== isSubType Cap^{} => X <:< Any = true
==> isSubType Nothing <:< Cap^{} => X?
<== isSubType Nothing <:< Cap^{} => X = true
==> isSubType Cap^{lcap} <:< Any?
  ==> isSubType Cap <:< Any?
  <== isSubType Cap <:< Any = true
<== isSubType Cap^{lcap} <:< Any = true
==> isSubType Nothing <:< Cap^{lcap}?
  ==> isSubType Nothing <:< Cap?
  <== isSubType Nothing <:< Cap = true
<== isSubType Nothing <:< Cap^{lcap} = true
==> isSubType X <:< Any?
<== isSubType X <:< Any = true
==> isSubType Nothing <:< X?
<== isSubType Nothing <:< X = true
==> isSubType Cap <:< Any?
  ==> isSubType Cap <:< Any?
  <== isSubType Cap <:< Any = true
<== isSubType Cap <:< Any = true
==> isSubType Nothing <:< Cap?
  ==> isSubType Nothing <:< Cap?
  <== isSubType Nothing <:< Cap = true
<== isSubType Nothing <:< Cap = true
==> isSubType Id[Cap] <:< Any?
  ==> isSubType Id[Cap] <:< Any?
  <== isSubType Id[Cap] <:< Any = true
<== isSubType Id[Cap] <:< Any = true
==> isSubType Nothing <:< Id[Cap]?
  ==> isSubType Nothing <:< Id[Cap]?
  <== isSubType Nothing <:< Id[Cap] = true
<== isSubType Nothing <:< Id[Cap] = true
==> isSubType Cap <:< Any?
<== isSubType Cap <:< Any = true
==> isSubType Nothing <:< Cap?
<== isSubType Nothing <:< Cap = true
==> isSubType [T] => (op: X => T) -> T <:< [T] => (op: X => T) -> T?
<== isSubType [T] => (op: X => T) -> T <:< [T] => (op: X => T) -> T = true
==> isSubType (): Int <:< (): Int?
  ==> isSubType Int <:< Int?
  <== isSubType Int <:< Int = true
<== isSubType (): Int <:< (): Int = true
==> isSubType (): Int <:< (): Int?
<== isSubType (): Int <:< (): Int = true
==> isSubType (): Unit <:< (): Unit?
<== isSubType (): Unit <:< (): Unit = true
==> isSubType [X](x: X): Id[X] <:< [X](x: X): Id[X]?
<== isSubType [X](x: X): Id[X] <:< [X](x: X): Id[X] = true
can have inferred capture Unit = false
can have inferred capture Unit = false
can have inferred capture Unit = false
can have inferred capture X = true
can have inferred capture T = true
can have inferred capture Unit = false
==> > Subcaptures({}, {cap.rd})?
  ==> >> tryInclude({cap.rd}, [], {})?
  <== >> tryInclude({cap.rd}, [], {}) = OK
<== > Subcaptures({}, {cap.rd}) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {cap})?
  ==> >> tryInclude({cap}, [], {})?
  <== >> tryInclude({cap}, [], {}) = OK
<== > Subcaptures({}, {cap}) = OK
==> > Subcaptures({}, {cap.rd})?
  ==> >> tryInclude({cap.rd}, [], {})?
  <== >> tryInclude({cap.rd}, [], {}) = OK
<== > Subcaptures({}, {cap.rd}) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>})?
  ==> >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {})?
  <== >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {}) = OK
<== > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}) = OK
==> > Subcaptures({}, {cap.rd})?
  ==> >> tryInclude({cap.rd}, [], {})?
  <== >> tryInclude({cap.rd}, [], {}) = OK
<== > Subcaptures({}, {cap.rd}) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>})?
  ==> >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {})?
  <== >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {}) = OK
<== > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}) = OK
can have inferred capture Unit = false
can have inferred capture Cap = true
can have inferred capture X = true
can have inferred capture X = true
can have inferred capture Id = false
can have inferred capture Cap = true
can have inferred capture Id[box Cap^?13V] = true
can have inferred capture Id = false
can have inferred capture Cap = true
can have inferred capture Id[box Cap^?15V] = true
can have inferred capture scala.caps.Capability = true
can have inferred capture Function1 = false
can have inferred capture Cap = true
can have inferred capture Cap = true
can have inferred capture Cap^?18V = false
can have inferred capture Id = false
can have inferred capture Cap = true
can have inferred capture Id[box Cap^?19V] = true
can have inferred capture Cap^?18V -> Id[box Cap^?19V]^?20V = true
can have inferred capture Cap^?18V -> Id[box Cap^?19V]^?20V = true
can have inferred capture (Cap^?18V -> Id[box Cap^?19V]^?20V) @inferredDepFun = true
can have inferred capture Cap = true
can have inferred capture Cap = true
can have inferred capture Cap^?22V = false
can have inferred capture Id = false
can have inferred capture Cap = true
can have inferred capture Id[box Cap^?23V] = true
can have inferred capture Cap = true
can have inferred capture Any = false
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {cap})?
  ==> >> tryInclude({cap}, [], {})?
  <== >> tryInclude({cap}, [], {}) = OK
<== > Subcaptures({}, {cap}) = OK
==> > Subcaptures({}, {cap} of the self type of trait Cap)?
  ==> >> tryInclude({cap} of the self type of trait Cap, [], {})?
  <== >> tryInclude({cap} of the self type of trait Cap, [], {}) = OK
<== > Subcaptures({}, {cap} of the self type of trait Cap) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, ?1V)?
  ==> >> tryInclude(?1V, [], {})?
  <== >> tryInclude(?1V, [], {}) = OK
<== > Subcaptures({}, ?1V) = OK
==> > Subcaptures({}, ?1V of the self type of class Id)?
  ==> >> tryInclude(?1V of the self type of class Id, [], {})?
  <== >> tryInclude(?1V of the self type of class Id, [], {}) = OK
<== > Subcaptures({}, ?1V of the self type of class Id) = OK
==> > Subcaptures({}, ?1V of the self type of class Id)?
  ==> >> tryInclude(?1V of the self type of class Id, [], {})?
  <== >> tryInclude(?1V of the self type of class Id, [], {}) = OK
<== > Subcaptures({}, ?1V of the self type of class Id) = OK
==> > Subcaptures({}, {cap})?
  ==> >> tryInclude({cap}, [], {})?
  <== >> tryInclude({cap}, [], {}) = OK
<== > Subcaptures({}, {cap}) = OK
==> > Subcaptures({}, {cap})?
  ==> >> tryInclude({cap}, [], {})?
  <== >> tryInclude({cap}, [], {}) = OK
<== > Subcaptures({}, {cap}) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> isSubType Object <:< a type that can be selected or applied?
<== isSubType Object <:< a type that can be selected or applied = true
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, ?29V)?
  ==> >> tryInclude(?29V, [], {})?
  <== >> tryInclude(?29V, [], {}) = OK
<== > Subcaptures({}, ?29V) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {} of the self type of the top-level definitions in package <empty>)?
  ==> >> tryInclude({} of the self type of the top-level definitions in package <empty>, [], {})?
  <== >> tryInclude({} of the self type of the top-level definitions in package <empty>, [], {}) = OK
<== > Subcaptures({}, {} of the self type of the top-level definitions in package <empty>) = OK
==> > Subcaptures({} of the self type of the top-level definitions in package <empty>, {} of pure base class the top-level definitions in package <empty>)?
  ==> >> tryInclude({} of pure base class the top-level definitions in package <empty>, [], {} of the self type of the top-level definitions in package <empty>)?
  <== >> tryInclude({} of pure base class the top-level definitions in package <empty>, [], {} of the self type of the top-level definitions in package <empty>) = OK
<== > Subcaptures({} of the self type of the top-level definitions in package <empty>, {} of pure base class the top-level definitions in package <empty>) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> isSubType Object <:< a type that can be selected or applied?
<== isSubType Object <:< a type that can be selected or applied = true
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, ?29V)?
  ==> >> tryInclude(?29V, [], {})?
  <== >> tryInclude(?29V, [], {}) = OK
<== > Subcaptures({}, ?29V) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
can have inferred capture Any = false
can have inferred capture Any = false
can have inferred capture Int = false
can have inferred capture Int = false
can have inferred capture Class = false
can have inferred capture Any = false
can have inferred capture  = false
can have inferred capture Class[?] = true
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> isSubType scala.runtime.ModuleSerializationProxy <:< a type that can be selected or applied?
<== isSubType scala.runtime.ModuleSerializationProxy <:< a type that can be selected or applied = true
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> isSubType (classOf[cc-crash$package.type] : Class[cc-crash$package.type]) <:< Class[?]^<fluid>?
  ==> isSubType (classOf[cc-crash$package.type] : Class[cc-crash$package.type]) <:< Class[?]?
    ==> isSubType Nothing <:< cc-crash$package.type?
    <== isSubType Nothing <:< cc-crash$package.type = true
    ==> isSubType cc-crash$package.type <:< Any?
    <== isSubType cc-crash$package.type <:< Any = true
  <== isSubType (classOf[cc-crash$package.type] : Class[cc-crash$package.type]) <:< Class[?] = true
<== isSubType (classOf[cc-crash$package.type] : Class[cc-crash$package.type]) <:< Class[?]^<fluid> = true
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, ?32V)?
  ==> >> tryInclude(?32V, [], {})?
  <== >> tryInclude(?32V, [], {}) = OK
<== > Subcaptures({}, ?32V) = OK
can have inferred capture Nothing = false
==> > Subcaptures(?34F32V, ?31V)?
  ==> >> tryInclude(?31V, [], ?34F32V)?
  <== >> tryInclude(?31V, [], ?34F32V) = OK
<== > Subcaptures(?34F32V, ?31V) = OK
==> > Subcaptures({}, ?33F32V)?
  ==> >> tryInclude(?33F32V, [], {})?
  <== >> tryInclude(?33F32V, [], {}) = OK
<== > Subcaptures({}, ?33F32V) = OK
==> > Subcaptures({}, ?32V)?
  ==> >> tryInclude(?32V, [], {})?
  <== >> tryInclude(?32V, [], {}) = OK
<== > Subcaptures({}, ?32V) = OK
==> > Subcaptures(?32V, {})?
  ==> >> tryInclude({}, [], ?32V)?
  <== >> tryInclude({}, [], ?32V) = OK
<== > Subcaptures(?32V, {}) = ?32V
==> > Subcaptures({}, ?32V)?
  ==> >> tryInclude(?32V, [], {})?
  <== >> tryInclude(?32V, [], {}) = OK
<== > Subcaptures({}, ?32V) = OK
==> isSubType scala.runtime.ModuleSerializationProxy^?32V <:< AnyRef?
  ==> isSubType scala.runtime.ModuleSerializationProxy^?32V <:< Object?
entry ?32V vs {}
    ==> > Subcaptures(?32V, {})?
      ==> >> tryInclude({}, [], ?32V)?
      <== >> tryInclude({}, [], ?32V) = OK
    <== > Subcaptures(?32V, {}) = OK
    ==> isSubType scala.runtime.ModuleSerializationProxy <:< Object?
      ==> isSubType Object <:< Object (left is approximated)?
      <== isSubType Object <:< Object (left is approximated) = true
    <== isSubType scala.runtime.ModuleSerializationProxy <:< Object = true
  <== isSubType scala.runtime.ModuleSerializationProxy^?32V <:< Object = true
<== isSubType scala.runtime.ModuleSerializationProxy^?32V <:< AnyRef = true
==> > Subcaptures(?33F32V, {})?
  ==> >> tryInclude({}, [], ?33F32V)?
  <== >> tryInclude({}, [], ?33F32V) = OK
<== > Subcaptures(?33F32V, {}) = ?33F32V
==> > Subcaptures({}, ?33F32V)?
  ==> >> tryInclude(?33F32V, [], {})?
  <== >> tryInclude(?33F32V, [], {}) = OK
<== > Subcaptures({}, ?33F32V) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> isSubType Id <:< a type that can be selected or applied?
<== isSubType Id <:< a type that can be selected or applied = true
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {cap})?
  ==> >> tryInclude({cap}, [], {})?
  <== >> tryInclude({cap}, [], {}) = OK
<== > Subcaptures({}, {cap}) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {cap})?
  ==> >> tryInclude({cap}, [], {})?
  <== >> tryInclude({cap}, [], {}) = OK
<== > Subcaptures({}, {cap}) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {cap})?
  ==> >> tryInclude({cap}, [], {})?
  <== >> tryInclude({cap}, [], {}) = OK
<== > Subcaptures({}, {cap}) = OK
==> > Subcaptures({}, ?44B2V)?
  ==> >> tryInclude(?44B2V, [], {})?
  <== >> tryInclude(?44B2V, [], {}) = OK
<== > Subcaptures({}, ?44B2V) = OK
==> > Subcaptures({}, ?44B2V)?
  ==> >> tryInclude(?44B2V, [], {})?
  <== >> tryInclude(?44B2V, [], {}) = OK
<== > Subcaptures({}, ?44B2V) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {cap})?
  ==> >> tryInclude({cap}, [], {})?
  <== >> tryInclude({cap}, [], {}) = OK
<== > Subcaptures({}, {cap}) = OK
==> > Subcaptures({cap}, {})?
  ==> >> tryInclude({}, [cap], {cap})?
addNewElem cap to {} (count=1)
  <== >> tryInclude({}, [cap], {cap}) = {}
<== > Subcaptures({cap}, {}) = {}
==> > Subcaptures({}, {cap})?
  ==> >> tryInclude({cap}, [], {})?
  <== >> tryInclude({cap}, [], {}) = OK
<== > Subcaptures({}, {cap}) = OK
==> > Subcaptures({cap}, {})?
  ==> >> tryInclude({}, [cap], {cap})?
addNewElem cap to {} (count=2)
  <== >> tryInclude({}, [cap], {cap}) = {}
<== > Subcaptures({cap}, {}) = {}
==> isSubType X^?44B2V => T <:< X => T?
  ==> > Subcaptures({}, {cap})?
    ==> >> tryInclude({cap}, [], {})?
    <== >> tryInclude({cap}, [], {}) = OK
  <== > Subcaptures({}, {cap}) = OK
entry {cap} vs {cap}
  ==> > Subcaptures({cap}, {cap})?
    ==> >> tryInclude({cap}, [cap], {cap})?
    <== >> tryInclude({cap}, [cap], {cap}) = OK
  <== > Subcaptures({cap}, {cap}) = OK
  ==> isSubType X^?44B2V -> T <:< X => T?
    ==> isSubType X^?44B2V -> T <:< X -> T?
      ==> isSubType X <:< X^?44B2V?
        ==> isSubType X <:< X?
        <== isSubType X <:< X = true
      <== isSubType X <:< X^?44B2V = true
      ==> isSubType T <:< T?
      <== isSubType T <:< T = true
    <== isSubType X^?44B2V -> T <:< X -> T = true
  <== isSubType X^?44B2V -> T <:< X => T = true
<== isSubType X^?44B2V => T <:< X => T = true
==> > Subcaptures({}, {cap})?
  ==> >> tryInclude({cap}, [], {})?
  <== >> tryInclude({cap}, [], {}) = OK
<== > Subcaptures({}, {cap}) = OK
==> > Subcaptures({}, ?46V)?
  ==> >> tryInclude(?46V, [], {})?
  <== >> tryInclude(?46V, [], {}) = OK
<== > Subcaptures({}, ?46V) = OK
==> > Subcaptures({}, {op})?
  ==> >> tryInclude({op}, [], {})?
  <== >> tryInclude({op}, [], {}) = OK
<== > Subcaptures({}, {op}) = OK
==> > Subcaptures({}, {op})?
  ==> >> tryInclude({op}, [], {})?
  <== >> tryInclude({op}, [], {}) = OK
<== > Subcaptures({}, {op}) = OK
==> > Subcaptures({op}, {})?
  ==> >> tryInclude({}, [(op : X => T)], {op})?
addNewElem (op : X => T) to {} (count=3)
  <== >> tryInclude({}, [(op : X => T)], {op}) = {}
<== > Subcaptures({op}, {}) = {}
==> > Subcaptures({}, {op})?
  ==> >> tryInclude({op}, [], {})?
  <== >> tryInclude({op}, [], {}) = OK
<== > Subcaptures({}, {op}) = OK
==> isSubType (op : X => T) <:< a type that can be selected or applied?
<== isSubType (op : X => T) <:< a type that can be selected or applied = true
==> > Subcaptures({op}, {})?
  ==> >> tryInclude({}, [(op : X => T)], {op})?
addNewElem (op : X => T) to {} (count=4)
  <== >> tryInclude({}, [(op : X => T)], {op}) = {}
<== > Subcaptures({op}, {}) = {}
==> > Subcaptures({}, {op})?
  ==> >> tryInclude({op}, [], {})?
  <== >> tryInclude({op}, [], {}) = OK
<== > Subcaptures({}, {op}) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> isSubType (x : X) <:< X?
  ==> isSubType X <:< X (left is approximated)?
  <== isSubType X <:< X (left is approximated) = true
<== isSubType (x : X) <:< X = true
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures(?50F48V, ?46V)?
  ==> >> tryInclude(?46V, [], ?50F48V)?
  <== >> tryInclude(?46V, [], ?50F48V) = OK
<== > Subcaptures(?50F48V, ?46V) = OK
==> > Subcaptures(?51F48V, ?35V)?
  ==> >> tryInclude(?35V, [], ?51F48V)?
  <== >> tryInclude(?35V, [], ?51F48V) = OK
<== > Subcaptures(?51F48V, ?35V) = OK
==> > Subcaptures({}, ?49F48V)?
  ==> >> tryInclude(?49F48V, [], {})?
  <== >> tryInclude(?49F48V, [], {}) = OK
<== > Subcaptures({}, ?49F48V) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> isSubType T <:< T^?4V?
  ==> isSubType T <:< T?
  <== isSubType T <:< T = true
<== isSubType T <:< T^?4V = true
==> > Subcaptures(?49F48V, {})?
  ==> >> tryInclude({}, [], ?49F48V)?
  <== >> tryInclude({}, [], ?49F48V) = OK
<== > Subcaptures(?49F48V, {}) = ?49F48V
==> > Subcaptures({}, ?49F48V)?
  ==> >> tryInclude(?49F48V, [], {})?
  <== >> tryInclude(?49F48V, [], {}) = OK
<== > Subcaptures({}, ?49F48V) = OK
==> > Subcaptures({}, {cap})?
  ==> >> tryInclude({cap}, [], {})?
  <== >> tryInclude({cap}, [], {}) = OK
<== > Subcaptures({}, {cap}) = OK
==> > Subcaptures({}, {cap})?
  ==> >> tryInclude({cap}, [], {})?
  <== >> tryInclude({cap}, [], {}) = OK
<== > Subcaptures({}, {cap}) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {cap})?
  ==> >> tryInclude({cap}, [], {})?
  <== >> tryInclude({cap}, [], {}) = OK
<== > Subcaptures({}, {cap}) = OK
==> > Subcaptures({}, {cap})?
  ==> >> tryInclude({cap}, [], {})?
  <== >> tryInclude({cap}, [], {}) = OK
<== > Subcaptures({}, {cap}) = OK
==> > Subcaptures({}, ?59B56B55B4V)?
  ==> >> tryInclude(?59B56B55B4V, [], {})?
  <== >> tryInclude(?59B56B55B4V, [], {}) = OK
<== > Subcaptures({}, ?59B56B55B4V) = OK
==> > Subcaptures(?59B56B55B4V, {})?
  ==> >> tryInclude({}, [], ?59B56B55B4V)?
  <== >> tryInclude({}, [], ?59B56B55B4V) = OK
<== > Subcaptures(?59B56B55B4V, {}) = ?59B56B55B4V
==> > Subcaptures({}, ?59B56B55B4V)?
  ==> >> tryInclude(?59B56B55B4V, [], {})?
  <== >> tryInclude(?59B56B55B4V, [], {}) = OK
<== > Subcaptures({}, ?59B56B55B4V) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, ?46V)?
  ==> >> tryInclude(?46V, [], {})?
  <== >> tryInclude(?46V, [], {}) = OK
<== > Subcaptures({}, ?46V) = OK
==> > Subcaptures(?46V, {})?
  ==> >> tryInclude({}, [], ?46V)?
  <== >> tryInclude({}, [], ?46V) = OK
<== > Subcaptures(?46V, {}) = ?46V
==> > Subcaptures({}, ?46V)?
  ==> >> tryInclude(?46V, [], {})?
  <== >> tryInclude(?46V, [], {}) = OK
<== > Subcaptures({}, ?46V) = OK
==> isSubType [T] => (op: X => T) ->?46V T^?59B56B55B4V <:< [T] => (op: box X^?42B2V => T) -> T?
entry ?46V vs {}
  ==> > Subcaptures(?46V, {})?
    ==> >> tryInclude({}, [], ?46V)?
    <== >> tryInclude({}, [], ?46V) = OK
  <== > Subcaptures(?46V, {}) = OK
  ==> isSubType [T] => (op: X => T) -> T^?59B56B55B4V <:< [T] => (op: box X^?42B2V => T) -> T?
    ==> isSubType box X^?64B2V => T <:< X => T?
      ==> > Subcaptures({}, {cap})?
        ==> >> tryInclude({cap}, [], {})?
        <== >> tryInclude({cap}, [], {}) = OK
      <== > Subcaptures({}, {cap}) = OK
entry {cap} vs {cap}
      ==> > Subcaptures({cap}, {cap})?
        ==> >> tryInclude({cap}, [cap], {cap})?
        <== >> tryInclude({cap}, [cap], {cap}) = OK
      <== > Subcaptures({cap}, {cap}) = OK
      ==> isSubType box X^?64B2V -> T <:< X => T?
        ==> isSubType box X^?64B2V -> T <:< X -> T?
          ==> isSubType X <:< box X^?64B2V?
            ==> isSubType X <:< X?
            <== isSubType X <:< X = true
          <== isSubType X <:< box X^?64B2V = true
          ==> isSubType T <:< T?
          <== isSubType T <:< T = true
        <== isSubType box X^?64B2V -> T <:< X -> T = true
      <== isSubType box X^?64B2V -> T <:< X => T = true
    <== isSubType box X^?64B2V => T <:< X => T = true
    ==> isSubType T^?59B56B55B4V <:< T?
entry ?59B56B55B4V vs {}
      ==> > Subcaptures(?59B56B55B4V, {})?
        ==> >> tryInclude({}, [], ?59B56B55B4V)?
        <== >> tryInclude({}, [], ?59B56B55B4V) = OK
      <== > Subcaptures(?59B56B55B4V, {}) = OK
      ==> isSubType T <:< T?
      <== isSubType T <:< T = true
    <== isSubType T^?59B56B55B4V <:< T = true
  <== isSubType [T] => (op: X => T) -> T^?59B56B55B4V <:< [T] => (op: box X^?42B2V => T) -> T = true
<== isSubType [T] => (op: X => T) ->?46V T^?59B56B55B4V <:< [T] => (op: box X^?42B2V => T) -> T = true
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, ?28V)?
  ==> >> tryInclude(?28V, [], {})?
  <== >> tryInclude(?28V, [], {}) = OK
<== > Subcaptures({}, ?28V) = OK
==> > Subcaptures({}, {cap})?
  ==> >> tryInclude({cap}, [], {})?
  <== >> tryInclude({cap}, [], {}) = OK
<== > Subcaptures({}, {cap}) = OK
==> > Subcaptures(?66F28V, ?35V)?
  ==> >> tryInclude(?35V, [], ?66F28V)?
  <== >> tryInclude(?35V, [], ?66F28V) = OK
<== > Subcaptures(?66F28V, ?35V) = OK
==> > Subcaptures({}, ?65F28V)?
  ==> >> tryInclude(?65F28V, [], {})?
  <== >> tryInclude(?65F28V, [], {}) = OK
<== > Subcaptures({}, ?65F28V) = OK
==> > Subcaptures({}, ?28V)?
  ==> >> tryInclude(?28V, [], {})?
  <== >> tryInclude(?28V, [], {}) = OK
<== > Subcaptures({}, ?28V) = OK
==> > Subcaptures(?28V, {})?
  ==> >> tryInclude({}, [], ?28V)?
  <== >> tryInclude({}, [], ?28V) = OK
<== > Subcaptures(?28V, {}) = ?28V
==> > Subcaptures({}, ?28V)?
  ==> >> tryInclude(?28V, [], {})?
  <== >> tryInclude(?28V, [], {}) = OK
<== > Subcaptures({}, ?28V) = OK
==> isSubType Id[box X^?43B2V]^?28V <:< Id[X]?
entry ?28V vs {}
  ==> > Subcaptures(?28V, {})?
    ==> >> tryInclude({}, [], ?28V)?
    <== >> tryInclude({}, [], ?28V) = OK
  <== > Subcaptures(?28V, {}) = OK
  ==> isSubType Id[box X^?43B2V] <:< Id[X]?
    ==> isSubType X <:< box X^?43B2V?
      ==> isSubType X <:< X?
      <== isSubType X <:< X = true
    <== isSubType X <:< box X^?43B2V = true
    ==> isSubType box X^?43B2V <:< X?
entry ?43B2V vs {}
      ==> > Subcaptures(?43B2V, {})?
        ==> >> tryInclude({}, [], ?43B2V)?
        <== >> tryInclude({}, [], ?43B2V) = OK
      <== > Subcaptures(?43B2V, {}) = OK
      ==> > Subcaptures(?43B2V, {})?
        ==> >> tryInclude({}, [], ?43B2V)?
        <== >> tryInclude({}, [], ?43B2V) = OK
      <== > Subcaptures(?43B2V, {}) = OK
      ==> isSubType X <:< X?
      <== isSubType X <:< X = true
    <== isSubType box X^?43B2V <:< X = true
  <== isSubType Id[box X^?43B2V] <:< Id[X] = true
<== isSubType Id[box X^?43B2V]^?28V <:< Id[X] = true
==> > Subcaptures(?65F28V, {})?
  ==> >> tryInclude({}, [], ?65F28V)?
  <== >> tryInclude({}, [], ?65F28V) = OK
<== > Subcaptures(?65F28V, {}) = ?65F28V
==> > Subcaptures({}, ?65F28V)?
  ==> >> tryInclude(?65F28V, [], {})?
  <== >> tryInclude(?65F28V, [], {}) = OK
<== > Subcaptures({}, ?65F28V) = OK
==> > Subcaptures({}, {cap.rd})?
  ==> >> tryInclude({cap.rd}, [], {})?
  <== >> tryInclude({cap.rd}, [], {}) = OK
<== > Subcaptures({}, {cap.rd}) = OK
==> > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>})?
  ==> >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {})?
  <== >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {}) = OK
<== > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}) = OK
==> > Subcaptures({}, {cap.rd})?
  ==> >> tryInclude({cap.rd}, [], {})?
  <== >> tryInclude({cap.rd}, [], {}) = OK
<== > Subcaptures({}, {cap.rd}) = OK
==> > Subcaptures({}, {cap.rd})?
  ==> >> tryInclude({cap.rd}, [], {})?
  <== >> tryInclude({cap.rd}, [], {}) = OK
<== > Subcaptures({}, {cap.rd}) = OK
==> > Subcaptures({}, {lcap})?
  ==> >> tryInclude({lcap}, [], {})?
  <== >> tryInclude({lcap}, [], {}) = OK
<== > Subcaptures({}, {lcap}) = OK
==> > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>})?
  ==> >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {})?
  <== >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {}) = OK
<== > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}) = OK
==> > Subcaptures({}, {cap.rd})?
  ==> >> tryInclude({cap.rd}, [], {})?
  <== >> tryInclude({cap.rd}, [], {}) = OK
<== > Subcaptures({}, {cap.rd}) = OK
==> > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>})?
  ==> >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {})?
  <== >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {}) = OK
<== > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}) = OK
==> > Subcaptures({}, {cap.rd})?
  ==> >> tryInclude({cap.rd}, [], {})?
  <== >> tryInclude({cap.rd}, [], {}) = OK
<== > Subcaptures({}, {cap.rd}) = OK
==> > Subcaptures({}, {lcap})?
  ==> >> tryInclude({lcap}, [], {})?
  <== >> tryInclude({lcap}, [], {}) = OK
<== > Subcaptures({}, {lcap}) = OK
==> > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>})?
  ==> >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {})?
  <== >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {}) = OK
<== > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}) = OK
==> > Subcaptures({}, ?69V)?
  ==> >> tryInclude(?69V, [], {})?
  <== >> tryInclude(?69V, [], {}) = OK
<== > Subcaptures({}, ?69V) = OK
==> > Subcaptures({}, ?69V)?
  ==> >> tryInclude(?69V, [], {})?
  <== >> tryInclude(?69V, [], {}) = OK
<== > Subcaptures({}, ?69V) = OK
==> > Subcaptures({}, ?9V)?
  ==> >> tryInclude(?9V, [], {})?
  <== >> tryInclude(?9V, [], {}) = OK
<== > Subcaptures({}, ?9V) = OK
==> > Subcaptures(?69V, ?9V of the self type of anonymous class Object with Cap {...})?
  ==> >> tryInclude(?9V of the self type of anonymous class Object with Cap {...}, [], ?69V)?
  <== >> tryInclude(?9V of the self type of anonymous class Object with Cap {...}, [], ?69V) = OK
<== > Subcaptures(?69V, ?9V of the self type of anonymous class Object with Cap {...}) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> isSubType Object <:< a type that can be selected or applied?
<== isSubType Object <:< a type that can be selected or applied = true
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, ?29V)?
  ==> >> tryInclude(?29V, [], {})?
  <== >> tryInclude(?29V, [], {}) = OK
<== > Subcaptures({}, ?29V) = OK
==> > Subcaptures(?72F29V, ?69V)?
  ==> >> tryInclude(?69V, [], ?72F29V)?
  <== >> tryInclude(?69V, [], ?72F29V) = OK
<== > Subcaptures(?72F29V, ?69V) = OK
==> > Subcaptures(?73F29V, ?68V)?
  ==> >> tryInclude(?68V, [], ?73F29V)?
  <== >> tryInclude(?68V, [], ?73F29V) = OK
<== > Subcaptures(?73F29V, ?68V) = OK
==> > Subcaptures({}, ?71F29V)?
  ==> >> tryInclude(?71F29V, [], {})?
  <== >> tryInclude(?71F29V, [], {}) = OK
<== > Subcaptures({}, ?71F29V) = OK
==> > Subcaptures(?71F29V, {})?
  ==> >> tryInclude({}, [], ?71F29V)?
  <== >> tryInclude({}, [], ?71F29V) = OK
<== > Subcaptures(?71F29V, {}) = ?71F29V
==> > Subcaptures({}, ?71F29V)?
  ==> >> tryInclude(?71F29V, [], {})?
  <== >> tryInclude(?71F29V, [], {}) = OK
<== > Subcaptures({}, ?71F29V) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> isSubType ("cap is used" : String) <:< Any?
<== isSubType ("cap is used" : String) <:< Any = true
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures(?77F75V, ?74V)?
  ==> >> tryInclude(?74V, [], ?77F75V)?
  <== >> tryInclude(?74V, [], ?77F75V) = OK
<== > Subcaptures(?77F75V, ?74V) = OK
==> > Subcaptures(?78F75V, ?69V)?
  ==> >> tryInclude(?69V, [], ?78F75V)?
  <== >> tryInclude(?69V, [], ?78F75V) = OK
<== > Subcaptures(?78F75V, ?69V) = OK
==> > Subcaptures(?79F75V, ?68V)?
  ==> >> tryInclude(?68V, [], ?79F75V)?
  <== >> tryInclude(?68V, [], ?79F75V) = OK
<== > Subcaptures(?79F75V, ?68V) = OK
==> > Subcaptures({}, ?76F75V)?
  ==> >> tryInclude(?76F75V, [], {})?
  <== >> tryInclude(?76F75V, [], {}) = OK
<== > Subcaptures({}, ?76F75V) = OK
==> > Subcaptures(?76F75V, {})?
  ==> >> tryInclude({}, [], ?76F75V)?
  <== >> tryInclude({}, [], ?76F75V) = OK
<== > Subcaptures(?76F75V, {}) = ?76F75V
==> > Subcaptures({}, ?76F75V)?
  ==> >> tryInclude(?76F75V, [], {})?
  <== >> tryInclude(?76F75V, [], {}) = OK
<== > Subcaptures({}, ?76F75V) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> isSubType (0 : Int) <:< Int?
  ==> isSubType Int <:< Int (left is approximated)?
    ==> isSubType (scala : scala.type) <:< scala.type?
    <== isSubType (scala : scala.type) <:< scala.type = true
  <== isSubType Int <:< Int (left is approximated) = true
<== isSubType (0 : Int) <:< Int = true
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> isSubType Object with Cap {...} <:< a type that can be selected or applied?
<== isSubType Object with Cap {...} <:< a type that can be selected or applied = true
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures(?69V, ?70V)?
  ==> >> tryInclude(?70V, [], ?69V)?
  <== >> tryInclude(?70V, [], ?69V) = OK
<== > Subcaptures(?69V, ?70V) = ?69V
==> > Subcaptures(?70V, ?69V)?
  ==> >> tryInclude(?69V, [], ?70V)?
  <== >> tryInclude(?69V, [], ?70V) = OK
<== > Subcaptures(?70V, ?69V) = ?70V
==> > Subcaptures(?82F70V, ?68V)?
  ==> >> tryInclude(?68V, [], ?82F70V)?
  <== >> tryInclude(?68V, [], ?82F70V) = OK
<== > Subcaptures(?82F70V, ?68V) = OK
==> > Subcaptures({}, ?81F70V)?
  ==> >> tryInclude(?81F70V, [], {})?
  <== >> tryInclude(?81F70V, [], {}) = OK
<== > Subcaptures({}, ?81F70V) = OK
==> > Subcaptures({}, ?80U)?
  ==> >> tryInclude(?80U, [], {})?
  <== >> tryInclude(?80U, [], {}) = OK
<== > Subcaptures({}, ?80U) = OK
==> > Subcaptures(?80U, {})?
  ==> >> tryInclude({}, [], ?80U)?
  <== >> tryInclude({}, [], ?80U) = OK
<== > Subcaptures(?80U, {}) = ?80U
==> > Subcaptures({}, ?80U)?
  ==> >> tryInclude(?80U, [], {})?
  <== >> tryInclude(?80U, [], {}) = OK
<== > Subcaptures({}, ?80U) = OK
==> > Subcaptures({}, ?80U)?
  ==> >> tryInclude(?80U, [], {})?
  <== >> tryInclude(?80U, [], {}) = OK
<== > Subcaptures({}, ?80U) = OK
==> isSubType Object with Cap {...}^?80U <:< Cap^?10V?
  ==> > Subcaptures({}, ?10V)?
    ==> >> tryInclude(?10V, [], {})?
    <== >> tryInclude(?10V, [], {}) = OK
  <== > Subcaptures({}, ?10V) = OK
entry ?80U vs ?10V
  ==> > Subcaptures(?80U, ?10V)?
    ==> >> tryInclude(?10V, [], ?80U)?
    <== >> tryInclude(?10V, [], ?80U) = OK
  <== > Subcaptures(?80U, ?10V) = OK
  ==> isSubType Object with Cap {...} <:< Cap^?10V?
    ==> isSubType Object with Cap {...} <:< Cap?
      ==> isSubType Cap <:< Cap (left is approximated)?
      <== isSubType Cap <:< Cap (left is approximated) = true
    <== isSubType Object with Cap {...} <:< Cap = true
  <== isSubType Object with Cap {...} <:< Cap^?10V = true
<== isSubType Object with Cap {...}^?80U <:< Cap^?10V = true
==> > Subcaptures(?81F70V, {})?
  ==> >> tryInclude({}, [], ?81F70V)?
  <== >> tryInclude({}, [], ?81F70V) = OK
<== > Subcaptures(?81F70V, {}) = ?81F70V
==> > Subcaptures({}, ?81F70V)?
  ==> >> tryInclude(?81F70V, [], {})?
  <== >> tryInclude(?81F70V, [], {}) = OK
<== > Subcaptures({}, ?81F70V) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, ?10V)?
  ==> >> tryInclude(?10V, [], {})?
  <== >> tryInclude(?10V, [], {}) = OK
<== > Subcaptures({}, ?10V) = OK
==> > Subcaptures(?10V, {})?
  ==> >> tryInclude({}, [], ?10V)?
  <== >> tryInclude({}, [], ?10V) = OK
<== > Subcaptures(?10V, {}) = ?10V
==> > Subcaptures({}, ?10V)?
  ==> >> tryInclude(?10V, [], {})?
  <== >> tryInclude(?10V, [], {}) = OK
<== > Subcaptures({}, ?10V) = OK
==> isSubType Cap^?10V <:< Cap?
entry ?10V vs {}
  ==> > Subcaptures(?10V, {})?
    ==> >> tryInclude({}, [], ?10V)?
    <== >> tryInclude({}, [], ?10V) = OK
  <== > Subcaptures(?10V, {}) = OK
  ==> isSubType Cap <:< Cap?
  <== isSubType Cap <:< Cap = true
<== isSubType Cap^?10V <:< Cap = true
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> isSubType (op : (lcap: scala.caps.Capability) ?-> Cap^{lcap} => X) <:< a type that can be selected or applied?
<== isSubType (op : (lcap: scala.caps.Capability) ?-> Cap^{lcap} => X) <:< a type that can be selected or applied = true
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> isSubType (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X <:< (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X?
  ==> isSubType Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X <:< Cap^{x$0} ->{<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>} X?
    ==> > Subcaptures({}, {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>})?
      ==> >> tryInclude({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, [], {})?
      <== >> tryInclude({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, [], {}) = OK
    <== > Subcaptures({}, {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}) = OK
entry {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} vs {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}
    ==> > Subcaptures({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>})?
      ==> >> tryInclude({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, [<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>], {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>})?
addNewElem <cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X> to {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>} (count=5)
      <== >> tryInclude({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, [<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>], {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}) = {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}
    <== > Subcaptures({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}) = {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}
    ==> > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>})?
      ==> >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {})?
      <== >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {}) = OK
    <== > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}) = OK
entry {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} vs {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}
    ==> > Subcaptures({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>})?
      ==> >> tryInclude({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, [<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>], {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>})?
addNewElem <cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X> to {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>} (count=6)
      <== >> tryInclude({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, [<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>], {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}) = {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}
    <== > Subcaptures({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}) = {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}
  <== isSubType Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X <:< Cap^{x$0} ->{<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>} X = false
<== isSubType (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X <:< (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X = false
==> isSubType Cap^{x$0} ->{<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>} X <:< Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X?
  ==> > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>})?
    ==> >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {})?
    <== >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {}) = OK
  <== > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}) = OK
entry {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>} vs {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}
  ==> > Subcaptures({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>})?
    ==> >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>], {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>})?
addNewElem <cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X> to {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} (count=7)
    <== >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>], {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}) = {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}
  <== > Subcaptures({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}) = {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}
  ==> > Subcaptures({}, {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>})?
    ==> >> tryInclude({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, [], {})?
    <== >> tryInclude({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, [], {}) = OK
  <== > Subcaptures({}, {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}) = OK
entry {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>} vs {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}
  ==> > Subcaptures({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>})?
    ==> >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>], {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>})?
addNewElem <cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X> to {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} (count=8)
    <== >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>], {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}) = {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}
  <== > Subcaptures({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}) = {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}
<== isSubType Cap^{x$0} ->{<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>} X <:< Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X = false
==> isSubType Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X <:< Cap^{x$0} ->{<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>} X?
  ==> > Subcaptures({}, {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>})?
    ==> >> tryInclude({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, [], {})?
    <== >> tryInclude({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, [], {}) = OK
  <== > Subcaptures({}, {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}) = OK
entry {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} vs {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}
  ==> > Subcaptures({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>})?
    ==> >> tryInclude({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, [<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>], {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>})?
addNewElem <cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X> to {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>} (count=9)
    <== >> tryInclude({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, [<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>], {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}) = {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}
  <== > Subcaptures({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}) = {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}
  ==> > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>})?
    ==> >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {})?
    <== >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {}) = OK
  <== > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}) = OK
entry {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} vs {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}
  ==> > Subcaptures({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>})?
    ==> >> tryInclude({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, [<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>], {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>})?
addNewElem <cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X> to {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>} (count=10)
    <== >> tryInclude({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, [<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>], {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}) = {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}
  <== > Subcaptures({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}) = {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}
<== isSubType Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X <:< Cap^{x$0} ->{<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>} X = false
==> > Subcaptures({}, {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>})?
  ==> >> tryInclude({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, [], {})?
  <== >> tryInclude({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, [], {}) = OK
<== > Subcaptures({}, {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}) = OK
==> > Subcaptures({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>})?
  ==> >> tryInclude({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, [<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>], {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>})?
addNewElem <cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X> to {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>} (count=11)
  <== >> tryInclude({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, [<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>], {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}) = {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}
<== > Subcaptures({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}) = {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}
==> > Subcaptures({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>})?
  ==> >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>], {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>})?
addNewElem <cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X> to {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} (count=12)
  <== >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>], {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}) = {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}
<== > Subcaptures({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}) = {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}
==> isSubType Cap^{x$0} ->{<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>} X <:< Cap -> X?
entry {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>} vs {}
  ==> > Subcaptures({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, {})?
    ==> >> tryInclude({}, [<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>], {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>})?
addNewElem <cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X> to {} (count=13)
    <== >> tryInclude({}, [<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>], {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}) = {}
  <== > Subcaptures({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, {}) = {}
<== isSubType Cap^{x$0} ->{<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>} X <:< Cap -> X = false
==> isSubType Cap -> X <:< Cap^{x$0} ->{<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>} X?
  ==> isSubType Cap -> X <:< Cap^{x$0} -> X?
    ==> isSubType Cap^{x$0} <:< Cap?
entry {x$0} vs {}
      ==> > Subcaptures({x$0}, {})?
        ==> >> tryInclude({}, [x$0.type], {x$0})?
          ==> > Subcaptures({}, {cap.rd})?
            ==> >> tryInclude({cap.rd}, [], {})?
            <== >> tryInclude({cap.rd}, [], {}) = OK
          <== > Subcaptures({}, {cap.rd}) = OK
          ==> > Subcaptures({cap.rd}, {})?
            ==> >> tryInclude({}, [cap.rd], {cap.rd})?
addNewElem cap.rd to {} (count=14)
            <== >> tryInclude({}, [cap.rd], {cap.rd}) = {}
          <== > Subcaptures({cap.rd}, {}) = {}
addNewElem x$0.type to {} (count=15)
        <== >> tryInclude({}, [x$0.type], {x$0}) = {}
      <== > Subcaptures({x$0}, {}) = {}
    <== isSubType Cap^{x$0} <:< Cap = false
  <== isSubType Cap -> X <:< Cap^{x$0} -> X = false
<== isSubType Cap -> X <:< Cap^{x$0} ->{<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>} X = false
==> > Subcaptures({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, {})?
  ==> >> tryInclude({}, [<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>], {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>})?
addNewElem <cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X> to {} (count=16)
  <== >> tryInclude({}, [<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>], {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}) = {}
<== > Subcaptures({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, {}) = {}
==> > Subcaptures({}, {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>})?
  ==> >> tryInclude({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, [], {})?
  <== >> tryInclude({<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}, [], {}) = OK
<== > Subcaptures({}, {<cap of (using x$0: scala.caps.Capability^{cap.rd}): Cap ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X>}) = OK
==> isSubType Cap -> X <:< Cap^{x$0} -> X?
  ==> isSubType Cap^{x$0} <:< Cap?
entry {x$0} vs {}
    ==> > Subcaptures({x$0}, {})?
      ==> >> tryInclude({}, [x$0.type], {x$0})?
        ==> > Subcaptures({cap.rd}, {})?
          ==> >> tryInclude({}, [cap.rd], {cap.rd})?
addNewElem cap.rd to {} (count=17)
          <== >> tryInclude({}, [cap.rd], {cap.rd}) = {}
        <== > Subcaptures({cap.rd}, {}) = {}
addNewElem x$0.type to {} (count=18)
      <== >> tryInclude({}, [x$0.type], {x$0}) = {}
    <== > Subcaptures({x$0}, {}) = {}
  <== isSubType Cap^{x$0} <:< Cap = false
<== isSubType Cap -> X <:< Cap^{x$0} -> X = false
==> isSubType Cap^{x$0} -> X <:< Cap -> X?
  ==> isSubType Cap <:< Cap^{x$0}?
    ==> isSubType Cap <:< Cap?
    <== isSubType Cap <:< Cap = true
  <== isSubType Cap <:< Cap^{x$0} = true
  ==> isSubType X <:< X?
  <== isSubType X <:< X = true
<== isSubType Cap^{x$0} -> X <:< Cap -> X = true
==> isSubType (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X <:< (using x$0: scala.caps.Capability^{cap.rd}): Cap^{x$0} -> X?
  ==> isSubType Cap^{lcap} ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X <:< Cap^{lcap} -> X?
entry {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} vs {}
    ==> > Subcaptures({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, {})?
      ==> >> tryInclude({}, [<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>], {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>})?
addNewElem <cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X> to {} (count=19)
      <== >> tryInclude({}, [<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>], {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}) = {}
    <== > Subcaptures({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, {}) = {}
  <== isSubType Cap^{lcap} ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>} X <:< Cap^{lcap} -> X = false
<== isSubType (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X <:< (using x$0: scala.caps.Capability^{cap.rd}): Cap^{x$0} -> X = false
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> isSubType scala.caps.type <:< a type that can be selected or applied?
<== isSubType scala.caps.type <:< a type that can be selected or applied = true
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> isSubType cap <:< scala.caps.Capability^{cap.rd}?
entry {} vs {cap.rd}
  ==> > Subcaptures({}, {cap.rd})?
    ==> >> tryInclude({cap.rd}, [], {})?
    <== >> tryInclude({cap.rd}, [], {}) = OK
  <== > Subcaptures({}, {cap.rd}) = OK
  ==> isSubType scala.caps.cap <:< scala.caps.Capability^{cap.rd}?
    ==> isSubType scala.caps.cap <:< scala.caps.Capability?
      ==> isSubType scala.caps.Capability <:< scala.caps.Capability (left is approximated)?
        ==> isSubType (scala.caps : scala.caps.type) <:< scala.caps.type?
        <== isSubType (scala.caps : scala.caps.type) <:< scala.caps.type = true
      <== isSubType scala.caps.Capability <:< scala.caps.Capability (left is approximated) = true
    <== isSubType scala.caps.cap <:< scala.caps.Capability = true
  <== isSubType scala.caps.cap <:< scala.caps.Capability^{cap.rd} = true
<== isSubType cap <:< scala.caps.Capability^{cap.rd} = true
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {cap})?
  ==> >> tryInclude({cap}, [], {})?
  <== >> tryInclude({cap}, [], {}) = OK
<== > Subcaptures({}, {cap}) = OK
==> > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>})?
  ==> >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {})?
  <== >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {}) = OK
<== > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}) = OK
==> > Subcaptures({}, {cap})?
  ==> >> tryInclude({cap}, [], {})?
  <== >> tryInclude({cap}, [], {}) = OK
<== > Subcaptures({}, {cap}) = OK
==> > Subcaptures({}, {cap})?
  ==> >> tryInclude({cap}, [], {})?
  <== >> tryInclude({cap}, [], {}) = OK
<== > Subcaptures({}, {cap}) = OK
==> > Subcaptures(?88F86V, ?68V)?
  ==> >> tryInclude(?68V, [], ?88F86V)?
  <== >> tryInclude(?68V, [], ?88F86V) = OK
<== > Subcaptures(?88F86V, ?68V) = OK
==> > Subcaptures({}, ?87F86V)?
  ==> >> tryInclude(?87F86V, [], {})?
  <== >> tryInclude(?87F86V, [], {}) = OK
<== > Subcaptures({}, ?87F86V) = OK
==> > Subcaptures({}, {cap})?
  ==> >> tryInclude({cap}, [], {})?
  <== >> tryInclude({cap}, [], {}) = OK
<== > Subcaptures({}, {cap}) = OK
==> > Subcaptures({cap}, {})?
  ==> >> tryInclude({}, [cap], {cap})?
addNewElem cap to {} (count=20)
  <== >> tryInclude({}, [cap], {cap}) = {}
<== > Subcaptures({cap}, {}) = {}
==> > Subcaptures({}, {cap})?
  ==> >> tryInclude({cap}, [], {})?
  <== >> tryInclude({cap}, [], {}) = OK
<== > Subcaptures({}, {cap}) = OK
==> isSubType Cap^ => X <:< a type that can be selected or applied?
<== isSubType Cap^ => X <:< a type that can be selected or applied = true
==> > Subcaptures(?87F86V, {})?
  ==> >> tryInclude({}, [], ?87F86V)?
  <== >> tryInclude({}, [], ?87F86V) = OK
<== > Subcaptures(?87F86V, {}) = ?87F86V
==> > Subcaptures({}, ?87F86V)?
  ==> >> tryInclude(?87F86V, [], {})?
  <== >> tryInclude(?87F86V, [], {}) = OK
<== > Subcaptures({}, ?87F86V) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> isSubType (cap : Cap) <:< Cap^?
  ==> isSubType (cap : Cap) <:< Cap?
    ==> isSubType Cap <:< Cap (left is approximated)?
    <== isSubType Cap <:< Cap (left is approximated) = true
  <== isSubType (cap : Cap) <:< Cap = true
<== isSubType (cap : Cap) <:< Cap^ = true
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {cap})?
  ==> >> tryInclude({cap}, [], {})?
  <== >> tryInclude({cap}, [], {}) = OK
<== > Subcaptures({}, {cap}) = OK
==> > Subcaptures(?92F48V, ?68V)?
  ==> >> tryInclude(?68V, [], ?92F48V)?
  <== >> tryInclude(?68V, [], ?92F48V) = OK
<== > Subcaptures(?92F48V, ?68V) = OK
==> > Subcaptures({}, ?91F48V)?
  ==> >> tryInclude(?91F48V, [], {})?
  <== >> tryInclude(?91F48V, [], {}) = OK
<== > Subcaptures({}, ?91F48V) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> isSubType X <:< X^?11V?
  ==> isSubType X <:< X?
  <== isSubType X <:< X = true
<== isSubType X <:< X^?11V = true
==> > Subcaptures(?91F48V, {})?
  ==> >> tryInclude({}, [], ?91F48V)?
  <== >> tryInclude({}, [], ?91F48V) = OK
<== > Subcaptures(?91F48V, {}) = ?91F48V
==> > Subcaptures({}, ?91F48V)?
  ==> >> tryInclude(?91F48V, [], {})?
  <== >> tryInclude(?91F48V, [], {}) = OK
<== > Subcaptures({}, ?91F48V) = OK
==> > Subcaptures({}, {}11V(solved) of value result)?
  ==> >> tryInclude({}11V(solved) of value result, [], {})?
  <== >> tryInclude({}11V(solved) of value result, [], {}) = OK
<== > Subcaptures({}, {}11V(solved) of value result) = OK
==> > Subcaptures({}, {}11V(solved) of value result)?
  ==> >> tryInclude({}11V(solved) of value result, [], {})?
  <== >> tryInclude({}11V(solved) of value result, [], {}) = OK
<== > Subcaptures({}, {}11V(solved) of value result) = OK
==> > Subcaptures({}11V(solved) of value result, {})?
  ==> >> tryInclude({}, [], {}11V(solved) of value result)?
  <== >> tryInclude({}, [], {}11V(solved) of value result) = OK
<== > Subcaptures({}11V(solved) of value result, {}) = OK
==> isSubType (result : X^{}11V(solved)) <:< X^?12V?
  ==> isSubType (result : X^{}11V(solved)) <:< X?
    ==> isSubType X^{}11V(solved) <:< X (left is approximated)?
entry {}11V(solved) of value result vs {}
      ==> > Subcaptures({}11V(solved) of value result, {})?
        ==> >> tryInclude({}, [], {}11V(solved) of value result)?
        <== >> tryInclude({}, [], {}11V(solved) of value result) = OK
      <== > Subcaptures({}11V(solved) of value result, {}) = OK
      ==> isSubType X <:< X (left is approximated)?
      <== isSubType X <:< X (left is approximated) = true
    <== isSubType X^{}11V(solved) <:< X (left is approximated) = true
  <== isSubType (result : X^{}11V(solved)) <:< X = true
<== isSubType (result : X^{}11V(solved)) <:< X^?12V = true
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, ?12V)?
  ==> >> tryInclude(?12V, [], {})?
  <== >> tryInclude(?12V, [], {}) = OK
<== > Subcaptures({}, ?12V) = OK
==> > Subcaptures(?12V, {})?
  ==> >> tryInclude({}, [], ?12V)?
  <== >> tryInclude({}, [], ?12V) = OK
<== > Subcaptures(?12V, {}) = ?12V
==> > Subcaptures({}, ?12V)?
  ==> >> tryInclude(?12V, [], {})?
  <== >> tryInclude(?12V, [], {}) = OK
<== > Subcaptures({}, ?12V) = OK
==> isSubType X^?12V <:< X?
entry ?12V vs {}
  ==> > Subcaptures(?12V, {})?
    ==> >> tryInclude({}, [], ?12V)?
    <== >> tryInclude({}, [], ?12V) = OK
  <== > Subcaptures(?12V, {}) = OK
  ==> isSubType X <:< X?
  <== isSubType X <:< X = true
<== isSubType X^?12V <:< X = true
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {cap.rd})?
  ==> >> tryInclude({cap.rd}, [], {})?
  <== >> tryInclude({cap.rd}, [], {}) = OK
<== > Subcaptures({}, {cap.rd}) = OK
==> > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>})?
  ==> >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {})?
  <== >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {}) = OK
<== > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}) = OK
==> > Subcaptures({}, {cap.rd})?
  ==> >> tryInclude({cap.rd}, [], {})?
  <== >> tryInclude({cap.rd}, [], {}) = OK
<== > Subcaptures({}, {cap.rd}) = OK
==> > Subcaptures({}, {cap.rd})?
  ==> >> tryInclude({cap.rd}, [], {})?
  <== >> tryInclude({cap.rd}, [], {}) = OK
<== > Subcaptures({}, {cap.rd}) = OK
==> > Subcaptures({}, {lcap})?
  ==> >> tryInclude({lcap}, [], {})?
  <== >> tryInclude({lcap}, [], {}) = OK
<== > Subcaptures({}, {lcap}) = OK
==> > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>})?
  ==> >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {})?
  <== >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}, [], {}) = OK
<== > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}): Cap^{lcap} => X>}) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {cap.rd})?
  ==> >> tryInclude({cap.rd}, [], {})?
  <== >> tryInclude({cap.rd}, [], {}) = OK
<== > Subcaptures({}, {cap.rd}) = OK
==> > Subcaptures({cap.rd}, {})?
  ==> >> tryInclude({}, [cap.rd], {cap.rd})?
addNewElem cap.rd to {} (count=21)
  <== >> tryInclude({}, [cap.rd], {cap.rd}) = {}
<== > Subcaptures({cap.rd}, {}) = {}
==> > Subcaptures({}, {cap.rd})?
  ==> >> tryInclude({cap.rd}, [], {})?
  <== >> tryInclude({cap.rd}, [], {}) = OK
<== > Subcaptures({}, {cap.rd}) = OK
==> > Subcaptures({}, {cap.rd})?
  ==> >> tryInclude({cap.rd}, [], {})?
  <== >> tryInclude({cap.rd}, [], {}) = OK
<== > Subcaptures({}, {cap.rd}) = OK
==> isSubType scala.caps.Capability^{cap.rd} <:< scala.caps.Capability^?105B17V?
  ==> > Subcaptures({}, ?105B17V)?
    ==> >> tryInclude(?105B17V, [], {})?
    <== >> tryInclude(?105B17V, [], {}) = OK
  <== > Subcaptures({}, ?105B17V) = OK
entry {cap.rd} vs ?105B17V
  ==> > Subcaptures({cap.rd}, ?105B17V)?
    ==> >> tryInclude(?105B17V, [cap.rd], {cap.rd})?
addNewElem cap.rd to ?17V of parameter lcap (count=22)
addNewElem cap.rd to ?105B17V (count=23)
propagating new elem cap.rd backward from {cap.rd}105B17V to {cap.rd}17V of parameter lcap = OK
addNewElem cap.rd to {cap.rd}105B17V (count=24)
    <== >> tryInclude(?105B17V, [cap.rd], {cap.rd}) = OK
  <== > Subcaptures({cap.rd}, ?105B17V) = OK
  ==> isSubType scala.caps.Capability <:< scala.caps.Capability^{cap.rd}105B17V?
    ==> isSubType scala.caps.Capability <:< scala.caps.Capability?
    <== isSubType scala.caps.Capability <:< scala.caps.Capability = true
  <== isSubType scala.caps.Capability <:< scala.caps.Capability^{cap.rd}105B17V = true
<== isSubType scala.caps.Capability^{cap.rd} <:< scala.caps.Capability^?105B17V = true
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, ?22V of parameter c)?
  ==> >> tryInclude(?22V of parameter c, [], {})?
  <== >> tryInclude(?22V of parameter c, [], {}) = OK
<== > Subcaptures({}, ?22V of parameter c) = OK
==> > Subcaptures({}, {c})?
  ==> >> tryInclude({c}, [], {})?
  <== >> tryInclude({c}, [], {}) = OK
<== > Subcaptures({}, {c}) = OK
==> > Subcaptures({}, ?22V of parameter c)?
  ==> >> tryInclude(?22V of parameter c, [], {})?
  <== >> tryInclude(?22V of parameter c, [], {}) = OK
<== > Subcaptures({}, ?22V of parameter c) = OK
==> > Subcaptures(?22V of parameter c, {})?
  ==> >> tryInclude({}, [], ?22V of parameter c)?
  <== >> tryInclude({}, [], ?22V of parameter c) = OK
<== > Subcaptures(?22V of parameter c, {}) = ?22V of parameter c
==> > Subcaptures({}, ?22V of parameter c)?
  ==> >> tryInclude(?22V of parameter c, [], {})?
  <== >> tryInclude(?22V of parameter c, [], {}) = OK
<== > Subcaptures({}, ?22V of parameter c) = OK
==> isSubType box Cap^?22V <:< box Cap^?110B25V?
  ==> > Subcaptures({}, ?110B25V)?
    ==> >> tryInclude(?110B25V, [], {})?
    <== >> tryInclude(?110B25V, [], {}) = OK
  <== > Subcaptures({}, ?110B25V) = OK
entry ?22V of parameter c vs ?110B25V
  ==> > Subcaptures(?22V of parameter c, ?110B25V)?
    ==> >> tryInclude(?110B25V, [], ?22V of parameter c)?
    <== >> tryInclude(?110B25V, [], ?22V of parameter c) = OK
  <== > Subcaptures(?22V of parameter c, ?110B25V) = OK
  ==> isSubType Cap <:< Cap^?110B25V?
    ==> isSubType Cap <:< Cap?
    <== isSubType Cap <:< Cap = true
  <== isSubType Cap <:< Cap^?110B25V = true
<== isSubType box Cap^?22V <:< box Cap^?110B25V = true
==> > Subcaptures(?114F35V, ?109V)?
  ==> >> tryInclude(?109V, [], ?114F35V)?
  <== >> tryInclude(?109V, [], ?114F35V) = OK
<== > Subcaptures(?114F35V, ?109V) = OK
==> > Subcaptures(?115F35V, ?108V)?
  ==> >> tryInclude(?108V, [], ?115F35V)?
  <== >> tryInclude(?108V, [], ?115F35V) = OK
<== > Subcaptures(?115F35V, ?108V) = OK
==> > Subcaptures(?116F35V, ?107V)?
  ==> >> tryInclude(?107V, [], ?116F35V)?
  <== >> tryInclude(?107V, [], ?116F35V) = OK
<== > Subcaptures(?116F35V, ?107V) = OK
==> > Subcaptures(?117F35V, ?67V)?
  ==> >> tryInclude(?67V, [], ?117F35V)?
  <== >> tryInclude(?67V, [], ?117F35V) = OK
<== > Subcaptures(?117F35V, ?67V) = OK
==> > Subcaptures({}, ?113F35V)?
  ==> >> tryInclude(?113F35V, [], {})?
  <== >> tryInclude(?113F35V, [], {}) = OK
<== > Subcaptures({}, ?113F35V) = OK
==> > Subcaptures(?113F35V, {})?
  ==> >> tryInclude({}, [], ?113F35V)?
  <== >> tryInclude({}, [], ?113F35V) = OK
<== > Subcaptures(?113F35V, {}) = ?113F35V
==> > Subcaptures({}, ?113F35V)?
  ==> >> tryInclude(?113F35V, [], {})?
  <== >> tryInclude(?113F35V, [], {}) = OK
<== > Subcaptures({}, ?113F35V) = OK
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> isSubType Id[box Cap^?111B25V] <:< Id[box Cap^?23V]^?24V?
  ==> isSubType Id[box Cap^?111B25V] <:< Id[box Cap^?23V]?
    ==> isSubType box Cap^?23V <:< box Cap^?111B25V?
      ==> > Subcaptures({}, ?111B25V)?
        ==> >> tryInclude(?111B25V, [], {})?
        <== >> tryInclude(?111B25V, [], {}) = OK
      <== > Subcaptures({}, ?111B25V) = OK
entry ?23V of method $anonfun vs ?111B25V
      ==> > Subcaptures(?23V of method $anonfun, ?111B25V)?
        ==> >> tryInclude(?111B25V, [], ?23V of method $anonfun)?
        <== >> tryInclude(?111B25V, [], ?23V of method $anonfun) = OK
      <== > Subcaptures(?23V of method $anonfun, ?111B25V) = OK
      ==> isSubType Cap <:< Cap^?111B25V?
        ==> isSubType Cap <:< Cap?
        <== isSubType Cap <:< Cap = true
      <== isSubType Cap <:< Cap^?111B25V = true
    <== isSubType box Cap^?23V <:< box Cap^?111B25V = true
    ==> isSubType box Cap^?111B25V <:< box Cap^?23V?
      ==> > Subcaptures({}, ?23V of method $anonfun)?
        ==> >> tryInclude(?23V of method $anonfun, [], {})?
        <== >> tryInclude(?23V of method $anonfun, [], {}) = OK
      <== > Subcaptures({}, ?23V of method $anonfun) = OK
entry ?111B25V vs ?23V of method $anonfun
      ==> > Subcaptures(?111B25V, ?23V of method $anonfun)?
        ==> >> tryInclude(?23V of method $anonfun, [], ?111B25V)?
        <== >> tryInclude(?23V of method $anonfun, [], ?111B25V) = OK
      <== > Subcaptures(?111B25V, ?23V of method $anonfun) = OK
      ==> isSubType Cap <:< Cap^?23V?
        ==> isSubType Cap <:< Cap?
        <== isSubType Cap <:< Cap = true
      <== isSubType Cap <:< Cap^?23V = true
    <== isSubType box Cap^?111B25V <:< box Cap^?23V = true
  <== isSubType Id[box Cap^?111B25V] <:< Id[box Cap^?23V] = true
<== isSubType Id[box Cap^?111B25V] <:< Id[box Cap^?23V]^?24V = true
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, ?124B118B22V)?
  ==> >> tryInclude(?124B118B22V, [], {})?
  <== >> tryInclude(?124B118B22V, [], {}) = OK
<== > Subcaptures({}, ?124B118B22V) = OK
==> > Subcaptures({}, ?124B118B22V)?
  ==> >> tryInclude(?124B118B22V, [], {})?
  <== >> tryInclude(?124B118B22V, [], {}) = OK
<== > Subcaptures({}, ?124B118B22V) = OK
==> > Subcaptures({}, ?126B123B121B24V)?
  ==> >> tryInclude(?126B123B121B24V, [], {})?
  <== >> tryInclude(?126B123B121B24V, [], {}) = OK
<== > Subcaptures({}, ?126B123B121B24V) = OK
==> > Subcaptures(?126B123B121B24V, {})?
  ==> >> tryInclude({}, [], ?126B123B121B24V)?
  <== >> tryInclude({}, [], ?126B123B121B24V) = OK
<== > Subcaptures(?126B123B121B24V, {}) = ?126B123B121B24V
==> > Subcaptures({}, ?126B123B121B24V)?
  ==> >> tryInclude(?126B123B121B24V, [], {})?
  <== >> tryInclude(?126B123B121B24V, [], {}) = OK
<== > Subcaptures({}, ?126B123B121B24V) = OK
==> > Subcaptures({}, ?109V)?
  ==> >> tryInclude(?109V, [], {})?
  <== >> tryInclude(?109V, [], {}) = OK
<== > Subcaptures({}, ?109V) = OK
==> > Subcaptures(?109V, {})?
  ==> >> tryInclude({}, [], ?109V)?
  <== >> tryInclude({}, [], ?109V) = OK
<== > Subcaptures(?109V, {}) = ?109V
==> > Subcaptures({}, ?109V)?
  ==> >> tryInclude(?109V, [], {})?
  <== >> tryInclude(?109V, [], {}) = OK
<== > Subcaptures({}, ?109V) = OK
==> > Subcaptures({}, ?109V)?
  ==> >> tryInclude(?109V, [], {})?
  <== >> tryInclude(?109V, [], {}) = OK
<== > Subcaptures({}, ?109V) = OK
==> isSubType (c: Cap^?124B118B22V) ->?109V Id[box Cap^?125B122B120B23V]^?126B123B121B24V <:< (c: Cap^?127B18V) ->?21V Id[box Cap^?128B19V]^?129B20V?
  ==> > Subcaptures({}, ?21V of method $anonfun)?
    ==> >> tryInclude(?21V of method $anonfun, [], {})?
    <== >> tryInclude(?21V of method $anonfun, [], {}) = OK
  <== > Subcaptures({}, ?21V of method $anonfun) = OK
entry ?109V vs ?21V of method $anonfun
  ==> > Subcaptures(?109V, ?21V of method $anonfun)?
    ==> >> tryInclude(?21V of method $anonfun, [], ?109V)?
    <== >> tryInclude(?21V of method $anonfun, [], ?109V) = OK
  <== > Subcaptures(?109V, ?21V of method $anonfun) = OK
  ==> isSubType (c: Cap^?124B118B22V) -> Id[box Cap^?125B122B120B23V]^?126B123B121B24V <:< (c: Cap^?127B18V) ->?21V Id[box Cap^?128B19V]^?129B20V?
    ==> isSubType (c: Cap^?124B118B22V) -> Id[box Cap^?125B122B120B23V]^?126B123B121B24V <:< (c: Cap^?127B18V) -> Id[box Cap^?128B19V]^?129B20V?
      ==> isSubType Cap^?127B18V <:< Cap^?124B118B22V?
        ==> > Subcaptures({}, ?124B118B22V)?
          ==> >> tryInclude(?124B118B22V, [], {})?
          <== >> tryInclude(?124B118B22V, [], {}) = OK
        <== > Subcaptures({}, ?124B118B22V) = OK
entry ?127B18V vs ?124B118B22V
        ==> > Subcaptures(?127B18V, ?124B118B22V)?
          ==> >> tryInclude(?124B118B22V, [], ?127B18V)?
          <== >> tryInclude(?124B118B22V, [], ?127B18V) = OK
        <== > Subcaptures(?127B18V, ?124B118B22V) = OK
        ==> isSubType Cap <:< Cap^?124B118B22V?
          ==> isSubType Cap <:< Cap?
          <== isSubType Cap <:< Cap = true
        <== isSubType Cap <:< Cap^?124B118B22V = true
      <== isSubType Cap^?127B18V <:< Cap^?124B118B22V = true
      ==> isSubType Id[box Cap^?125B122B120B23V]^?126B123B121B24V <:< Id[box Cap^?131B19V]^?132B20V?
        ==> > Subcaptures({}, ?132B20V)?
          ==> >> tryInclude(?132B20V, [], {})?
          <== >> tryInclude(?132B20V, [], {}) = OK
        <== > Subcaptures({}, ?132B20V) = OK
entry ?126B123B121B24V vs ?132B20V
        ==> > Subcaptures(?126B123B121B24V, ?132B20V)?
          ==> >> tryInclude(?132B20V, [], ?126B123B121B24V)?
          <== >> tryInclude(?132B20V, [], ?126B123B121B24V) = OK
        <== > Subcaptures(?126B123B121B24V, ?132B20V) = OK
        ==> isSubType Id[box Cap^?125B122B120B23V] <:< Id[box Cap^?131B19V]^?132B20V?
          ==> isSubType Id[box Cap^?125B122B120B23V] <:< Id[box Cap^?131B19V]?
            ==> isSubType box Cap^?131B19V <:< box Cap^?125B122B120B23V?
              ==> > Subcaptures({}, ?125B122B120B23V)?
                ==> >> tryInclude(?125B122B120B23V, [], {})?
                <== >> tryInclude(?125B122B120B23V, [], {}) = OK
              <== > Subcaptures({}, ?125B122B120B23V) = OK
entry ?131B19V vs ?125B122B120B23V
              ==> > Subcaptures(?131B19V, ?125B122B120B23V)?
                ==> >> tryInclude(?125B122B120B23V, [], ?131B19V)?
                <== >> tryInclude(?125B122B120B23V, [], ?131B19V) = OK
              <== > Subcaptures(?131B19V, ?125B122B120B23V) = OK
              ==> isSubType Cap <:< Cap^?125B122B120B23V?
                ==> isSubType Cap <:< Cap?
                <== isSubType Cap <:< Cap = true
              <== isSubType Cap <:< Cap^?125B122B120B23V = true
            <== isSubType box Cap^?131B19V <:< box Cap^?125B122B120B23V = true
            ==> isSubType box Cap^?125B122B120B23V <:< box Cap^?131B19V?
              ==> > Subcaptures({}, ?131B19V)?
                ==> >> tryInclude(?131B19V, [], {})?
                <== >> tryInclude(?131B19V, [], {}) = OK
              <== > Subcaptures({}, ?131B19V) = OK
entry ?125B122B120B23V vs ?131B19V
              ==> > Subcaptures(?125B122B120B23V, ?131B19V)?
                ==> >> tryInclude(?131B19V, [], ?125B122B120B23V)?
                <== >> tryInclude(?131B19V, [], ?125B122B120B23V) = OK
              <== > Subcaptures(?125B122B120B23V, ?131B19V) = OK
              ==> isSubType Cap <:< Cap^?131B19V?
                ==> isSubType Cap <:< Cap?
                <== isSubType Cap <:< Cap = true
              <== isSubType Cap <:< Cap^?131B19V = true
            <== isSubType box Cap^?125B122B120B23V <:< box Cap^?131B19V = true
          <== isSubType Id[box Cap^?125B122B120B23V] <:< Id[box Cap^?131B19V] = true
        <== isSubType Id[box Cap^?125B122B120B23V] <:< Id[box Cap^?131B19V]^?132B20V = true
      <== isSubType Id[box Cap^?125B122B120B23V]^?126B123B121B24V <:< Id[box Cap^?131B19V]^?132B20V = true
    <== isSubType (c: Cap^?124B118B22V) -> Id[box Cap^?125B122B120B23V]^?126B123B121B24V <:< (c: Cap^?127B18V) -> Id[box Cap^?128B19V]^?129B20V = true
  <== isSubType (c: Cap^?124B118B22V) -> Id[box Cap^?125B122B120B23V]^?126B123B121B24V <:< (c: Cap^?127B18V) ->?21V Id[box Cap^?128B19V]^?129B20V = true
<== isSubType (c: Cap^?124B118B22V) ->?109V Id[box Cap^?125B122B120B23V]^?126B123B121B24V <:< (c: Cap^?127B18V) ->?21V Id[box Cap^?128B19V]^?129B20V = true
==> > Subcaptures({}, {})?
  ==> >> tryInclude({}, [], {})?
  <== >> tryInclude({}, [], {}) = OK
<== > Subcaptures({}, {}) = OK
==> > Subcaptures({}, {cap.rd})?
  ==> >> tryInclude({cap.rd}, [], {})?
  <== >> tryInclude({cap.rd}, [], {}) = OK
<== > Subcaptures({}, {cap.rd}) = OK
==> > Subcaptures({}, {cap.rd}162B133B17V)?
  ==> >> tryInclude({cap.rd}162B133B17V, [], {})?
  <== >> tryInclude({cap.rd}162B133B17V, [], {}) = OK
<== > Subcaptures({}, {cap.rd}162B133B17V) = OK
==> > Subcaptures({}, {cap.rd}162B133B17V)?
  ==> >> tryInclude({cap.rd}162B133B17V, [], {})?
  <== >> tryInclude({cap.rd}162B133B17V, [], {}) = OK
<== > Subcaptures({}, {cap.rd}162B133B17V) = OK
==> > Subcaptures({}, ?169B18V)?
  ==> >> tryInclude(?169B18V, [], {})?
  <== >> tryInclude(?169B18V, [], {}) = OK
<== > Subcaptures({}, ?169B18V) = OK
==> > Subcaptures({}, ?169B18V)?
  ==> >> tryInclude(?169B18V, [], {})?
  <== >> tryInclude(?169B18V, [], {}) = OK
<== > Subcaptures({}, ?169B18V) = OK
==> > Subcaptures({}, ?171B146B143B20V)?
  ==> >> tryInclude(?171B146B143B20V, [], {})?
  <== >> tryInclude(?171B146B143B20V, [], {}) = OK
<== > Subcaptures({}, ?171B146B143B20V) = OK
==> > Subcaptures(?171B146B143B20V, {})?
  ==> >> tryInclude({}, [], ?171B146B143B20V)?
  <== >> tryInclude({}, [], ?171B146B143B20V) = OK
<== > Subcaptures(?171B146B143B20V, {}) = ?171B146B143B20V
==> > Subcaptures({}, ?171B146B143B20V)?
  ==> >> tryInclude(?171B146B143B20V, [], {})?
  <== >> tryInclude(?171B146B143B20V, [], {}) = OK
<== > Subcaptures({}, ?171B146B143B20V) = OK
==> > Subcaptures({}, ?172B161B160B21V)?
  ==> >> tryInclude(?172B161B160B21V, [], {})?
  <== >> tryInclude(?172B161B160B21V, [], {}) = OK
<== > Subcaptures({}, ?172B161B160B21V) = OK
==> > Subcaptures(?172B161B160B21V, {})?
  ==> >> tryInclude({}, [], ?172B161B160B21V)?
  <== >> tryInclude({}, [], ?172B161B160B21V) = OK
<== > Subcaptures(?172B161B160B21V, {}) = ?172B161B160B21V
==> > Subcaptures({}, ?172B161B160B21V)?
  ==> >> tryInclude(?172B161B160B21V, [], {})?
  <== >> tryInclude(?172B161B160B21V, [], {}) = OK
<== > Subcaptures({}, ?172B161B160B21V) = OK
==> > Subcaptures({}, ?108V)?
  ==> >> tryInclude(?108V, [], {})?
  <== >> tryInclude(?108V, [], {}) = OK
<== > Subcaptures({}, ?108V) = OK
==> > Subcaptures(?108V, {})?
  ==> >> tryInclude({}, [], ?108V)?
  <== >> tryInclude({}, [], ?108V) = OK
<== > Subcaptures(?108V, {}) = ?108V
==> > Subcaptures({}, ?108V)?
  ==> >> tryInclude(?108V, [], {})?
  <== >> tryInclude(?108V, [], {}) = OK
<== > Subcaptures({}, ?108V) = OK
==> isSubType (lcap: scala.caps.Capability^{cap.rd}178B133B17V) ?->?108V Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V <:< (lcap: scala.caps.Capability^{cap.rd}) ?-> Cap^{lcap} => box Id[box Cap^?99B15V]^?100B16V?
entry ?108V vs {}
  ==> > Subcaptures(?108V, {})?
    ==> >> tryInclude({}, [], ?108V)?
    <== >> tryInclude({}, [], ?108V) = OK
  <== > Subcaptures(?108V, {}) = OK
  ==> isSubType (lcap: scala.caps.Capability^{cap.rd}178B133B17V) ?-> Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V <:< (lcap: scala.caps.Capability^{cap.rd}) ?-> Cap^{lcap} => box Id[box Cap^?99B15V]^?100B16V?
    ==> isSubType scala.caps.Capability^{cap.rd} <:< scala.caps.Capability^{cap.rd}178B133B17V?
      ==> > Subcaptures({}, {cap.rd}178B133B17V)?
        ==> >> tryInclude({cap.rd}178B133B17V, [], {})?
        <== >> tryInclude({cap.rd}178B133B17V, [], {}) = OK
      <== > Subcaptures({}, {cap.rd}178B133B17V) = OK
entry {cap.rd} vs {cap.rd}178B133B17V
      ==> > Subcaptures({cap.rd}, {cap.rd}178B133B17V)?
        ==> >> tryInclude({cap.rd}178B133B17V, [cap.rd], {cap.rd})?
        <== >> tryInclude({cap.rd}178B133B17V, [cap.rd], {cap.rd}) = OK
      <== > Subcaptures({cap.rd}, {cap.rd}178B133B17V) = OK
      ==> isSubType scala.caps.Capability <:< scala.caps.Capability^{cap.rd}178B133B17V?
        ==> isSubType scala.caps.Capability <:< scala.caps.Capability?
        <== isSubType scala.caps.Capability <:< scala.caps.Capability = true
      <== isSubType scala.caps.Capability <:< scala.caps.Capability^{cap.rd}178B133B17V = true
    <== isSubType scala.caps.Capability^{cap.rd} <:< scala.caps.Capability^{cap.rd}178B133B17V = true
    ==> isSubType Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V <:< Cap^{lcap} ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}178B133B17V): Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V>} box Id[box Cap^?189B15V]^?190B16V?
      ==> > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}178B133B17V): Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V>})?
        ==> >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}178B133B17V): Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V>}, [], {})?
        <== >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}178B133B17V): Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V>}, [], {}) = OK
      <== > Subcaptures({}, {<cap of (using lcap: scala.caps.Capability^{cap.rd}178B133B17V): Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V>}) = OK
entry ?188B161B160B21V vs {<cap of (using lcap: scala.caps.Capability^{cap.rd}178B133B17V): Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V>}
      ==> > Subcaptures(?188B161B160B21V, {<cap of (using lcap: scala.caps.Capability^{cap.rd}178B133B17V): Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V>})?
        ==> >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}178B133B17V): Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V>}, [], ?188B161B160B21V)?
        <== >> tryInclude({<cap of (using lcap: scala.caps.Capability^{cap.rd}178B133B17V): Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V>}, [], ?188B161B160B21V) = OK
      <== > Subcaptures(?188B161B160B21V, {<cap of (using lcap: scala.caps.Capability^{cap.rd}178B133B17V): Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V>}) = OK
      ==> isSubType Cap^?185B18V -> box Id[box Cap^?186B145B142B19V]^?187B146B143B20V <:< Cap^{lcap} ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}178B133B17V): Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V>} box Id[box Cap^?189B15V]^?190B16V?
        ==> isSubType Cap^?185B18V -> box Id[box Cap^?186B145B142B19V]^?187B146B143B20V <:< Cap^{lcap} -> box Id[box Cap^?189B15V]^?190B16V?
          ==> isSubType Cap^?179B18V -> box Id[box Cap^?180B145B142B19V]^?181B146B143B20V <:< Cap^{lcap} -> box Id[box Cap^?189B15V]^?190B16V?
            ==> isSubType Cap^{lcap} <:< Cap^?179B18V?
              ==> > Subcaptures({}, ?179B18V)?
                ==> >> tryInclude(?179B18V, [], {})?
                <== >> tryInclude(?179B18V, [], {}) = OK
              <== > Subcaptures({}, ?179B18V) = OK
entry {lcap} vs ?179B18V
              ==> > Subcaptures({lcap}, ?179B18V)?
                ==> >> tryInclude(?179B18V, [lcap.type], {lcap})?
                  ==> > Subcaptures({}, {cap.rd}178B133B17V)?
                    ==> >> tryInclude({cap.rd}178B133B17V, [], {})?
                    <== >> tryInclude({cap.rd}178B133B17V, [], {}) = OK
                  <== > Subcaptures({}, {cap.rd}178B133B17V) = OK
                  ==> > Subcaptures({cap.rd}178B133B17V, ?179B18V)?
                    ==> >> tryInclude(?179B18V, [cap.rd], {cap.rd}178B133B17V)?
addNewElem cap.rd to ?18V of method $anonfun (count=25)
propagating new elem cap.rd backward from ?179B18V to ?18V of method $anonfun = ?18V of method $anonfun
                    <== >> tryInclude(?179B18V, [cap.rd], {cap.rd}178B133B17V) = ?18V of method $anonfun
                  <== > Subcaptures({cap.rd}178B133B17V, ?179B18V) = ?18V of method $anonfun
                  ==> > Subcaptures({}, {cap.rd}17V of parameter lcap)?
                    ==> >> tryInclude({cap.rd}17V of parameter lcap, [], {})?
                    <== >> tryInclude({cap.rd}17V of parameter lcap, [], {}) = OK
                  <== > Subcaptures({}, {cap.rd}17V of parameter lcap) = OK
                  ==> > Subcaptures({cap.rd}17V of parameter lcap, ?18V of method $anonfun)?
                    ==> >> tryInclude(?18V of method $anonfun, [cap.rd], {cap.rd}17V of parameter lcap)?
addNewElem cap.rd to ?18V of method $anonfun (count=26)
                    <== >> tryInclude(?18V of method $anonfun, [cap.rd], {cap.rd}17V of parameter lcap) = ?18V of method $anonfun
                  <== > Subcaptures({cap.rd}17V of parameter lcap, ?18V of method $anonfun) = ?18V of method $anonfun
addNewElem lcap.type to ?18V of method $anonfun (count=27)
                  ==> > Subcaptures({cap.rd}17V of parameter lcap, ?127B18V)?
                    ==> >> tryInclude(?127B18V, [cap.rd], {cap.rd}17V of parameter lcap)?
addNewElem cap.rd to {lcap}18V of method $anonfun (count=28)
propagating new elem cap.rd backward from ?127B18V to {lcap}18V of method $anonfun = {lcap}18V of method $anonfun
                    <== >> tryInclude(?127B18V, [cap.rd], {cap.rd}17V of parameter lcap) = {lcap}18V of method $anonfun
                  <== > Subcaptures({cap.rd}17V of parameter lcap, ?127B18V) = {lcap}18V of method $anonfun
addNewElem lcap.type to ?127B18V (count=29)
                  ==> > Subcaptures({cap.rd}17V of parameter lcap, ?124B118B22V)?
                    ==> >> tryInclude(?124B118B22V, [cap.rd], {cap.rd}17V of parameter lcap)?
addNewElem cap.rd to ?22V of parameter c (count=30)
propagating new elem cap.rd backward from ?118B22V to ?22V of parameter c = ?22V of parameter c
propagating new elem cap.rd backward from ?124B118B22V to ?118B22V = ?22V of parameter c
                    <== >> tryInclude(?124B118B22V, [cap.rd], {cap.rd}17V of parameter lcap) = ?22V of parameter c
                  <== > Subcaptures({cap.rd}17V of parameter lcap, ?124B118B22V) = ?22V of parameter c
                  ==> > Subcaptures({cap.rd}17V of parameter lcap, ?118B22V)?
                    ==> >> tryInclude(?118B22V, [cap.rd], {cap.rd}17V of parameter lcap)?
addNewElem cap.rd to ?22V of parameter c (count=31)
propagating new elem cap.rd backward from ?118B22V to ?22V of parameter c = ?22V of parameter c
                    <== >> tryInclude(?118B22V, [cap.rd], {cap.rd}17V of parameter lcap) = ?22V of parameter c
                  <== > Subcaptures({cap.rd}17V of parameter lcap, ?118B22V) = ?22V of parameter c
                  ==> > Subcaptures({cap.rd}17V of parameter lcap, ?22V of parameter c)?
                    ==> >> tryInclude(?22V of parameter c, [cap.rd], {cap.rd}17V of parameter lcap)?
addNewElem cap.rd to ?22V of parameter c (count=32)
                    <== >> tryInclude(?22V of parameter c, [cap.rd], {cap.rd}17V of parameter lcap) = ?22V of parameter c
                  <== > Subcaptures({cap.rd}17V of parameter lcap, ?22V of parameter c) = ?22V of parameter c
addNewElem lcap.type to ?22V of parameter c (count=33)
addNewElem cap.rd to ?22V of parameter c (count=34)
addNewElem cap.rd to ?25V (count=35)
addNewElem cap.rd to ?110B25V (count=36)
addNewElem cap.rd to ?111B25V (count=37)
addNewElem cap.rd to ?23V of method $anonfun (count=38)
addNewElem cap.rd to ?120B23V (count=39)
addNewElem <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd}120B23V]^?121B24V>.rd to ?122B120B23V (count=40)
addNewElem <cap of (c: Cap^?124B118B22V): Id[box Cap^?125B122B120B23V]^?126B123B121B24V>.rd to ?125B122B120B23V (count=41)
addNewElem <cap of (x$0: Cap^{lcap}18V): Id[box Cap^?19V]^?20V>.rd to ?19V of method $anonfun (count=42)
addNewElem <cap of (c: Cap^{lcap}127B18V): Id[box Cap^?128B19V]^?129B20V>.rd to ?128B19V (count=43)
addNewElem <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd}125B122B120B23V]^?126B123B121B24V>.rd to ?131B19V (count=44)
addNewElem cap.rd to {cap.rd}23V of method $anonfun (count=45)
addNewElem cap.rd to {cap.rd}25V (count=46)
addNewElem cap.rd to {cap.rd}110B25V (count=47)
addNewElem cap.rd to {cap.rd}111B25V (count=48)
propagating new elem cap.rd backward from {cap.rd, cap.rd}111B25V to {cap.rd, cap.rd}25V = OK
addNewElem cap.rd to {cap.rd, cap.rd}111B25V (count=49)
addNewElem cap.rd to {cap.rd}120B23V (count=50)
addNewElem <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd}120B23V]^?121B24V>.rd to {<cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd}120B23V]^?121B24V>.rd}122B120B23V (count=51)
addNewElem <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd}125B122B120B23V]^?126B123B121B24V>.rd to {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}125B122B120B23V (count=52)
addNewElem <cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd}19V]^?20V>.rd to {<cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd}19V]^?20V>.rd}19V of method $anonfun (count=53)
addNewElem <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd}128B19V]^?129B20V>.rd to {<cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd}128B19V]^?129B20V>.rd}128B19V (count=54)
addNewElem <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd to {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}131B19V (count=55)
addNewElem cap.rd to {cap.rd, cap.rd}23V of method $anonfun (count=56)
addNewElem cap.rd to {cap.rd, cap.rd}25V (count=57)
addNewElem cap.rd to {cap.rd, cap.rd}110B25V (count=58)
addNewElem cap.rd to {cap.rd, cap.rd}111B25V (count=59)
propagating new elem cap.rd backward from {cap.rd, cap.rd, cap.rd}111B25V to {cap.rd, cap.rd, cap.rd}25V = OK
addNewElem cap.rd to {cap.rd, cap.rd, cap.rd}111B25V (count=60)
addNewElem cap.rd to {cap.rd, cap.rd}120B23V (count=61)
addNewElem <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd to {<cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd}122B120B23V (count=62)
addNewElem <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd to {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}125B122B120B23V (count=63)
addNewElem <cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd}19V]^?20V>.rd to {<cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd}19V]^?20V>.rd, <cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd}19V]^?20V>.rd}19V of method $anonfun (count=64)
addNewElem <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd}128B19V]^?129B20V>.rd to {<cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd}128B19V]^?129B20V>.rd, <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd}128B19V]^?129B20V>.rd}128B19V (count=65)
addNewElem <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd to {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}131B19V (count=66)
addNewElem cap.rd to {cap.rd, cap.rd, cap.rd}23V of method $anonfun (count=67)
addNewElem cap.rd to {cap.rd, cap.rd, cap.rd}25V (count=68)
addNewElem cap.rd to {cap.rd, cap.rd, cap.rd}110B25V (count=69)
addNewElem cap.rd to {cap.rd, cap.rd, cap.rd}111B25V (count=70)
propagating new elem cap.rd backward from {cap.rd, cap.rd, cap.rd, cap.rd}111B25V to {cap.rd, cap.rd, cap.rd, cap.rd}25V = OK
addNewElem cap.rd to {cap.rd, cap.rd, cap.rd, cap.rd}111B25V (count=71)
addNewElem cap.rd to {cap.rd, cap.rd, cap.rd}120B23V (count=72)
addNewElem <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd to {<cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of
  (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd}122B120B23V (count=73)
addNewElem <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd to {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}125B122B120B23V (count=74)
addNewElem <cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd, cap.rd}19V]^?20V>.rd to {<cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd, cap.rd}19V]^?20V>.rd, <cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd, cap.rd}19V]^?20V>.rd, <cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd, cap.rd}19V]^?20V
  >.rd}19V of method $anonfun (count=75)
addNewElem <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd to {<cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd, <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd, <cap of
  (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd}128B19V (count=76)
addNewElem <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd to {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}131B19V (count=77)
addNewElem cap.rd to {cap.rd, cap.rd, cap.rd, cap.rd}23V of method $anonfun (count=78)
addNewElem cap.rd to {cap.rd, cap.rd, cap.rd, cap.rd}25V (count=79)
addNewElem cap.rd to {cap.rd, cap.rd, cap.rd, cap.rd}110B25V (count=80)
addNewElem cap.rd to {cap.rd, cap.rd, cap.rd, cap.rd}111B25V (count=81)
propagating new elem cap.rd backward from {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}111B25V to {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}25V = OK
addNewElem cap.rd to {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}111B25V (count=82)
addNewElem cap.rd to {cap.rd, cap.rd, cap.rd, cap.rd}120B23V (count=83)
addNewElem <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd to {<cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd,
  <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd}122B120B23V (count=84)
addNewElem <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd to {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}
  125B122B120B23V (count=85)
addNewElem <cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}19V]^?20V>.rd to {<cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}19V]^?20V>.rd, <cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}19V]^?20V>.rd,
  <cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}19V]^?20V>.rd, <cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}19V]^?20V>.rd}19V of method $anonfun (count=86)
addNewElem <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd to {<cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd, <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd,
  <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd, <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd}128B19V (count=87)
addNewElem <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd to {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}131B19V (count=88)
addNewElem cap.rd to {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}23V of method $anonfun (count=89)
addNewElem cap.rd to {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}25V (count=90)
addNewElem cap.rd to {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}110B25V (count=91)
addNewElem cap.rd to {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}111B25V (count=92)
propagating new elem cap.rd backward from {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}111B25V to {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}25V = OK
addNewElem cap.rd to {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}111B25V (count=93)
addNewElem cap.rd to {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V (count=94)
addNewElem <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd to {<cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd,
  <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd,
  <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd}122B120B23V (count=95)
addNewElem <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd to {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}125B122B120B23V (count=96)
addNewElem <cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}19V]^?20V>.rd to {<cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}19V]^?20V>.rd, <cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}19V]^?20V>.rd,
  <cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}19V]^?20V>.rd, <cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}19V]^?20V>.rd, <cap of
  (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}19V]^?20V>.rd}19V of method $anonfun (count=97)
addNewElem <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd to {<cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd, <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd,
  <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd, <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd, <cap of
  (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd}128B19V (count=98)
addNewElem <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd to {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}131B19V (count=99)
addNewElem cap.rd to {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}23V of method $anonfun (count=100)
addNewElem cap.rd to {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}25V (count=101)
fail while prop backwards tryInclude cap.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}111B25V / class dotty.tools.dotc.core.Substituters$SubstBindingMap
fail while prop backwards tryInclude cap.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V / class dotty.tools.dotc.core.Substituters$SubstBindingMap
fail while prop backwards tryInclude <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {<cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd,
  <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd,
  <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd}
  122B120B23V / class dotty.tools.dotc.cc.root$toVar$2$
fail while prop backwards tryInclude <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}125B122B120B23V / class dotty.tools.dotc.core.Substituters$SubstBindingMap
fail while prop backwards tryInclude <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}131B19V / class dotty.tools.dotc.core.Substituters$SubstBindingMap
fail while prop backwards tryInclude cap.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V / class dotty.tools.dotc.core.Substituters$SubstBindingMap
fail while prop backwards tryInclude <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {<cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd,
  <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd,
  <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd}
  122B120B23V / class dotty.tools.dotc.cc.root$toVar$2$
fail while prop backwards tryInclude <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}125B122B120B23V / class dotty.tools.dotc.core.Substituters$SubstBindingMap
fail while prop backwards tryInclude <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}131B19V / class dotty.tools.dotc.core.Substituters$SubstBindingMap
fail while prop backwards tryInclude cap.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V / class dotty.tools.dotc.core.Substituters$SubstBindingMap
fail while prop backwards tryInclude <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {<cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd,
  <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd,
  <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd}
  122B120B23V / class dotty.tools.dotc.cc.root$toVar$2$
fail while prop backwards tryInclude <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}125B122B120B23V / class dotty.tools.dotc.core.Substituters$SubstBindingMap
fail while prop backwards tryInclude <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}131B19V / class dotty.tools.dotc.core.Substituters$SubstBindingMap
fail while prop backwards tryInclude cap.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V / class dotty.tools.dotc.core.Substituters$SubstBindingMap
fail while prop backwards tryInclude <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {<cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd,
  <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd,
  <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd}
  122B120B23V / class dotty.tools.dotc.cc.root$toVar$2$
fail while prop backwards tryInclude <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}125B122B120B23V / class dotty.tools.dotc.core.Substituters$SubstBindingMap
fail while prop backwards tryInclude <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}131B19V / class dotty.tools.dotc.core.Substituters$SubstBindingMap
fail while prop backwards tryInclude cap.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V / class dotty.tools.dotc.core.Substituters$SubstBindingMap
fail while prop backwards tryInclude <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {<cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd,
  <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd,
  <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd}
  122B120B23V / class dotty.tools.dotc.cc.root$toVar$2$
fail while prop backwards tryInclude <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}125B122B120B23V / class dotty.tools.dotc.core.Substituters$SubstBindingMap
fail while prop backwards tryInclude <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}131B19V / class dotty.tools.dotc.core.Substituters$SubstBindingMap
fail while prop backwards tryInclude cap.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V / class dotty.tools.dotc.core.Substituters$SubstBindingMap
fail while prop backwards tryInclude <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {<cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd,
  <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd,
  <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd}
  122B120B23V / class dotty.tools.dotc.cc.root$toVar$2$
fail while prop backwards tryInclude <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}125B122B120B23V / class dotty.tools.dotc.core.Substituters$SubstBindingMap
fail while prop backwards tryInclude <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}131B19V / class dotty.tools.dotc.core.Substituters$SubstBindingMap
fail while prop backwards tryInclude cap.rd of class dotty.tools.dotc.core.Types$CachedAnnotatedType in {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}110B25V / class dotty.tools.dotc.core.Substituters$SubstBindingMap
fail while prop backwards tryInclude lcap.type of class dotty.tools.dotc.core.Types$TermParamRefImpl in ?118B22V / class dotty.tools.dotc.cc.root$CapToFresh$Inverse
fail while prop backwards tryInclude lcap.type of class dotty.tools.dotc.core.Types$TermParamRefImpl in ?124B118B22V / class dotty.tools.dotc.core.Substituters$SubstBindingMap
fail while prop backwards tryInclude lcap.type of class dotty.tools.dotc.core.Types$TermParamRefImpl in ?179B18V / class dotty.tools.dotc.core.Substituters$SubstBindingsMap
                <== >> tryInclude(?179B18V, [lcap.type], {lcap}) = <missing> (with exception java.lang.AssertionError: assertion failed)
              <== > Subcaptures({lcap}, ?179B18V) = <missing> (with exception java.lang.AssertionError: assertion failed)
fail while subCaptures {lcap} <:< ?179B18V
assertion failure for Cap^{lcap} <:< Cap^?179B18V, frozen = false
            <== isSubType Cap^{lcap} <:< Cap^?179B18V = <missing> (with exception java.lang.AssertionError: assertion failed)
assertion failure for Cap^?179B18V -> box Id[box Cap^?180B145B142B19V]^?181B146B143B20V <:< Cap^{lcap} -> box Id[box Cap^?189B15V]^?190B16V, frozen = false
          <== isSubType Cap^?179B18V -> box Id[box Cap^?180B145B142B19V]^?181B146B143B20V <:< Cap^{lcap} -> box Id[box Cap^?189B15V]^?190B16V = <missing> (with exception java.lang.AssertionError: assertion failed)
assertion failure for Cap^?185B18V -> box Id[box Cap^?186B145B142B19V]^?187B146B143B20V <:< Cap^{lcap} -> box Id[box Cap^?189B15V]^?190B16V, frozen = false
        <== isSubType Cap^?185B18V -> box Id[box Cap^?186B145B142B19V]^?187B146B143B20V <:< Cap^{lcap} -> box Id[box Cap^?189B15V]^?190B16V = <missing> (with exception java.lang.AssertionError: assertion failed)
assertion failed while compare captured Cap^?185B18V -> box Id[box Cap^?186B145B142B19V]^?187B146B143B20V <:< Cap^{lcap} ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}178B133B17V): Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V>} box Id[box Cap^?189B15V]^?190B16V
assertion failure for Cap^?185B18V -> box Id[box Cap^?186B145B142B19V]^?187B146B143B20V <:< Cap^{lcap} ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}178B133B17V): Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V>} box Id[box Cap^?189B15V]^?190B16V, frozen = false
      <== isSubType Cap^?185B18V -> box Id[box Cap^?186B145B142B19V]^?187B146B143B20V <:< Cap^{lcap} ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}178B133B17V): Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V>} box Id[box Cap^?189B15V]^?190B16V = <missing> (with exception java.lang.AssertionError: assertion failed)
assertion failure for Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V <:< Cap^{lcap} ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}178B133B17V): Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V>} box Id[box Cap^?189B15V]^?190B16V, frozen = false
    <== isSubType Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V <:< Cap^{lcap} ->{<cap of (using lcap: scala.caps.Capability^{cap.rd}178B133B17V): Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V>} box Id[box Cap^?189B15V]^?190B16V = <missing> (with exception java.lang.AssertionError: assertion failed)
assertion failure for (lcap: scala.caps.Capability^{cap.rd}178B133B17V) ?-> Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V <:< (lcap: scala.caps.Capability^{cap.rd}) ?-> Cap^{lcap} => box Id[box Cap^?99B15V]^?100B16V, frozen = false
  <== isSubType (lcap: scala.caps.Capability^{cap.rd}178B133B17V) ?-> Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V <:< (lcap: scala.caps.Capability^{cap.rd}) ?-> Cap^{lcap} => box Id[box Cap^?99B15V]^?100B16V = <missing> (with exception java.lang.AssertionError: assertion failed)
assertion failure for (lcap: scala.caps.Capability^{cap.rd}178B133B17V) ?->?108V Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V <:< (lcap: scala.caps.Capability^{cap.rd}) ?-> Cap^{lcap} => box Id[box Cap^?99B15V]^?100B16V, frozen = false
<== isSubType (lcap: scala.caps.Capability^{cap.rd}178B133B17V) ?->?108V Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V <:< (lcap: scala.caps.Capability^{cap.rd}) ?-> Cap^{lcap} => box Id[box Cap^?99B15V]^?100B16V = <missing> (with exception java.lang.AssertionError: assertion failed)
fail while (lcap: scala.caps.Capability^{cap.rd}178B133B17V) ?->?108V Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V iscompat (lcap: scala.caps.Capability^{cap.rd}) ?-> Cap^{lcap} => box Id[box Cap^?99B15V]^?100B16V
Capture set dependencies:
  ?1V of the self type of class Id :: 
  ?2V                  :: ?36B2V, ?37B2V, ?38B2V, ?39B2V, ?40B2V, ?41B2V, ?42B2V, ?43B2V, ?44B2V, ?63B2V, ?64B2V
  ?4V of method $anonfun :: ?52B4V, ?53B4V, ?54B4V, ?55B4V
  ?9V of the self type of anonymous class Object with Cap {...} :: 
  ?10V                 :: {}
  {}11V(solved) of value result :: 
  ?12V                 :: {}
  ?15V                 :: ?93B15V, ?95B15V, ?97B15V, ?99B15V, ?101B15V, ?189B15V
  ?16V                 :: ?94B16V, ?96B16V, ?98B16V, ?100B16V, ?102B16V, ?190B16V
  {cap.rd}17V of parameter lcap :: {cap.rd}105B17V, {cap.rd}133B17V
  {lcap}18V of method $anonfun :: {lcap}127B18V, ?135B18V, ?138B18V, ?141B18V, ?147B18V, ?151B18V, ?154B18V, ?157B18V, ?163B18V, ?166B18V, ?169B18V, ?175B18V, ?179B18V, ?182B18V, ?185B18V
  {<cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}19V]^?20V>.rd, <cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}19V]^?20V>.rd,
  <cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}19V]^?20V>.rd, <cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}19V]^?20V>.rd,
  <cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}19V]^?20V>.rd, <cap of (x$0: Cap^{lcap}18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}19V]^?20V>.rd}19V of method $anonfun :: {<cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd, <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd,
  <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd, <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd,
  <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd, <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd}
  128B19V, {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}131B19V, ?136B19V, ?139B19V, ?142B19V
  ?20V of method $anonfun :: ?129B20V, ?132B20V, ?137B20V, ?140B20V, ?143B20V
  ?21V of method $anonfun :: ?144B21V, ?160B21V
  {cap.rd}22V of parameter c :: {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}110B25V, ?118B22V
  {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}23V of method $anonfun :: {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}111B25V, {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V
  ?24V of method $anonfun :: ?121B24V
  {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}25V :: {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}110B25V, {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}111B25V
  ?28V                 :: ?65F28V, ?66F28V, {}
  ?29V                 :: ?71F29V, ?72F29V, ?73F29V
  ?31V                 :: 
  ?32V                 :: ?33F32V, ?34F32V, {}
  ?33F32V              :: 
  ?34F32V              :: ?31V
  ?35V                 :: ?113F35V, ?114F35V, ?115F35V, ?116F35V, ?117F35V
  ?36B2V               :: 
  ?37B2V               :: 
  ?38B2V               :: 
  ?39B2V               :: 
  ?40B2V               :: 
  ?41B2V               :: 
  ?42B2V               :: 
  ?43B2V               :: {}
  ?44B2V               :: 
  ?46V                 :: {}
  ?48V                 :: ?49F48V, ?50F48V, ?51F48V, ?91F48V, ?92F48V
  ?49F48V              :: 
  ?50F48V              :: ?46V
  ?51F48V              :: ?35V
  ?52B4V               :: 
  ?53B4V               :: 
  ?54B4V               :: 
  ?55B4V               :: ?56B55B4V
  ?56B55B4V            :: ?57B56B55B4V, ?58B56B55B4V, ?59B56B55B4V
  ?57B56B55B4V         :: 
  ?58B56B55B4V         :: 
  ?59B56B55B4V         :: {}
  ?63B2V               :: 
  ?64B2V               :: 
  ?65F28V              :: 
  ?66F28V              :: ?35V
  ?67V                 :: 
  ?68V                 :: 
  ?69V                 :: ?9V of the self type of anonymous class Object with Cap {...}, ?80U
  ?70V                 :: ?80U, ?81F70V, ?82F70V
  ?71F29V              :: 
  ?72F29V              :: ?69V
  ?73F29V              :: ?68V
  ?74V                 :: 
  ?75V                 :: ?76F75V, ?77F75V, ?78F75V, ?79F75V
  ?76F75V              :: 
  ?77F75V              :: ?74V
  ?78F75V              :: ?69V
  ?79F75V              :: ?68V
  ?80U                 :: ?10V
  ?81F70V              :: 
  ?82F70V              :: ?68V
  ?86V                 :: ?87F86V, ?88F86V
  ?87F86V              :: 
  ?88F86V              :: ?68V
  ?91F48V              :: 
  ?92F48V              :: ?68V
  ?93B15V              :: 
  ?94B16V              :: 
  ?95B15V              :: 
  ?96B16V              :: 
  ?97B15V              :: 
  ?98B16V              :: 
  ?99B15V              :: 
  ?100B16V             :: 
  ?101B15V             :: 
  ?102B16V             :: 
  {cap.rd}105B17V      :: 
  ?107V                :: 
  ?108V                :: {}
  ?109V                :: ?21V of method $anonfun
  {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}110B25V :: 
  {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}111B25V :: {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}23V of method $anonfun
  ?113F35V             :: 
  ?114F35V             :: ?109V
  ?115F35V             :: ?108V
  ?116F35V             :: ?107V
  ?117F35V             :: ?67V
  ?118B22V             :: ?119B118B22V, ?124B118B22V
  ?119B118B22V         :: 
  {cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V :: {<cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd,
  <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd,
  <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd}
  122B120B23V
  ?121B24V             :: ?123B121B24V
  {<cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd,
  <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd,
  <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd, <cap of (c: Cap^?119B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}120B23V]^?121B24V>.rd}
  122B120B23V :: {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}125B122B120B23V
  ?123B121B24V         :: ?126B123B121B24V
  ?124B118B22V         :: 
  {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}125B122B120B23V :: {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}131B19V
  ?126B123B121B24V     :: ?132B20V
  {lcap}127B18V        :: ?124B118B22V
  {<cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd, <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd,
  <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd, <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd,
  <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd, <cap of (c: Cap^{lcap}127B18V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}128B19V]^?129B20V>.rd}
  128B19V :: 
  ?129B20V             :: 
  {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}131B19V :: {<cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd,
  <cap of (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd, <cap of
  (c: Cap^?124B118B22V): Id[box Cap^{cap.rd, cap.rd, cap.rd, cap.rd, cap.rd, cap.rd}125B122B120B23V]^?126B123B121B24V>.rd}125B122B120B23V
  ?132B20V             :: 
  {cap.rd}133B17V      :: {cap.rd}134B133B17V, {cap.rd}150B133B17V, {cap.rd}162B133B17V, {cap.rd}178B133B17V
  {cap.rd}134B133B17V  :: 
  ?135B18V             :: 
  ?136B19V             :: 
  ?137B20V             :: 
  ?138B18V             :: 
  ?139B19V             :: 
  ?140B20V             :: 
  ?141B18V             :: 
  ?142B19V             :: ?145B142B19V
  ?143B20V             :: ?146B143B20V
  ?144B21V             :: 
  ?145B142B19V         :: ?148B145B142B19V, ?152B145B142B19V, ?155B145B142B19V, ?158B145B142B19V, ?164B145B142B19V, ?167B145B142B19V, ?170B145B142B19V, ?176B145B142B19V, ?180B145B142B19V, ?183B145B142B19V, ?186B145B142B19V
  ?146B143B20V         :: ?149B146B143B20V, ?153B146B143B20V, ?156B146B143B20V, ?159B146B143B20V, ?165B146B143B20V, ?168B146B143B20V, ?171B146B143B20V, ?177B146B143B20V, ?181B146B143B20V, ?184B146B143B20V, ?187B146B143B20V
  ?147B18V             :: 
  ?148B145B142B19V     :: 
  ?149B146B143B20V     :: 
  {cap.rd}150B133B17V  :: 
  ?151B18V             :: 
  ?152B145B142B19V     :: 
  ?153B146B143B20V     :: 
  ?154B18V             :: 
  ?155B145B142B19V     :: 
  ?156B146B143B20V     :: 
  ?157B18V             :: 
  ?158B145B142B19V     :: 
  ?159B146B143B20V     :: 
  ?160B21V             :: ?161B160B21V
  ?161B160B21V         :: ?172B161B160B21V, ?188B161B160B21V
  {cap.rd}162B133B17V  :: 
  ?163B18V             :: 
  ?164B145B142B19V     :: 
  ?165B146B143B20V     :: 
  ?166B18V             :: 
  ?167B145B142B19V     :: 
  ?168B146B143B20V     :: 
  ?169B18V             :: 
  ?170B145B142B19V     :: 
  ?171B146B143B20V     :: 
  ?172B161B160B21V     :: 
  ?175B18V             :: 
  ?176B145B142B19V     :: 
  ?177B146B143B20V     :: 
  {cap.rd}178B133B17V  :: 
  ?179B18V             :: 
  ?180B145B142B19V     :: 
  ?181B146B143B20V     :: 
  ?182B18V             :: 
  ?183B145B142B19V     :: 
  ?184B146B143B20V     :: 
  ?185B18V             :: 
  ?186B145B142B19V     :: 
  ?187B146B143B20V     :: 
  ?188B161B160B21V     :: {<cap of (using lcap: scala.caps.Capability^{cap.rd}178B133B17V): Cap^?185B18V ->?188B161B160B21V box Id[box Cap^?186B145B142B19V]^?187B146B143B20V>}
  ?189B15V             :: 
  ?190B16V             :: 

  unhandled exception while running cc on issues/cc-crash.scala

  An unhandled exception was thrown in the compiler.
  Please file a crash report here:
  https://github.com/scala/scala3/issues/new/choose
  For non-enriched exceptions, compile with -Xno-enrich-error-messages.


     while compiling: issues/cc-crash.scala
        during phase: cc
                mode: Mode(ImplicitsEnabled)
     library version: version 2.13.16
    compiler version: version 3.7.2-RC1-bin-SNAPSHOT-nonbootstrapped-git-c481e91
            settings: -Vprint List(cc) -Ycc-debug true -classpath /Users/linyxus/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.13.16/scala-library-2.13.16.jar:/Users/linyxus/Workspace/scala3/library/../out/bootstrap/scala3-library-bootstrapped/scala-3.7.2-RC1-bin-SNAPSHOT-nonbootstrapped/scala3-library_3-3.7.2-RC1-bin-SNAPSHOT.jar -color never -d /Users/linyxus/Workspace/scala3/compiler/../out/default-last-scalac-out.jar

Exception in thread "main" java.lang.AssertionError: assertion failed
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:151)
	at dotty.tools.dotc.cc.CaptureSet.tryInclude(CaptureSet.scala:133)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set2.$div$colon(SimpleIdentitySet.scala:123)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet.tryInclude(CaptureSet.scala:133)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at scala.collection.ArrayOps$.foldLeft$extension(ArrayOps.scala:784)
	at dotty.tools.dotc.util.SimpleIdentitySet$SetN.$div$colon(SimpleIdentitySet.scala:210)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet.tryInclude(CaptureSet.scala:133)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set2.$div$colon(SimpleIdentitySet.scala:123)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet.tryInclude(CaptureSet.scala:133)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at scala.collection.ArrayOps$.foldLeft$extension(ArrayOps.scala:784)
	at dotty.tools.dotc.util.SimpleIdentitySet$SetN.$div$colon(SimpleIdentitySet.scala:210)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet.tryInclude(CaptureSet.scala:133)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set2.$div$colon(SimpleIdentitySet.scala:123)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet.tryInclude(CaptureSet.scala:133)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at scala.collection.ArrayOps$.foldLeft$extension(ArrayOps.scala:784)
	at dotty.tools.dotc.util.SimpleIdentitySet$SetN.$div$colon(SimpleIdentitySet.scala:210)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet.tryInclude(CaptureSet.scala:133)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set2.$div$colon(SimpleIdentitySet.scala:123)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet.tryInclude(CaptureSet.scala:133)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at scala.collection.ArrayOps$.foldLeft$extension(ArrayOps.scala:784)
	at dotty.tools.dotc.util.SimpleIdentitySet$SetN.$div$colon(SimpleIdentitySet.scala:210)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet.tryInclude(CaptureSet.scala:133)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set2.$div$colon(SimpleIdentitySet.scala:123)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet.tryInclude(CaptureSet.scala:133)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at scala.collection.ArrayOps$.foldLeft$extension(ArrayOps.scala:784)
	at dotty.tools.dotc.util.SimpleIdentitySet$SetN.$div$colon(SimpleIdentitySet.scala:210)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet.tryInclude(CaptureSet.scala:133)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set2.$div$colon(SimpleIdentitySet.scala:123)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet.tryInclude(CaptureSet.scala:133)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at scala.collection.ArrayOps$.foldLeft$extension(ArrayOps.scala:784)
	at dotty.tools.dotc.util.SimpleIdentitySet$SetN.$div$colon(SimpleIdentitySet.scala:210)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet.tryInclude(CaptureSet.scala:133)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set2.$div$colon(SimpleIdentitySet.scala:123)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet.tryInclude(CaptureSet.scala:133)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set2.$div$colon(SimpleIdentitySet.scala:123)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet.tryInclude(CaptureSet.scala:133)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set2.$div$colon(SimpleIdentitySet.scala:123)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:153)
	at dotty.tools.dotc.cc.CaptureSet.tryInclude(CaptureSet.scala:133)
	at dotty.tools.dotc.cc.CaptureSet.$anonfun$1(CaptureSet.scala:139)
	at dotty.tools.dotc.cc.CaptureSet.tryInclude$$anonfun$1(CaptureSet.scala:139)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet.tryInclude(CaptureSet.scala:138)
	at dotty.tools.dotc.cc.CaptureSet.$anonfun$2(CaptureSet.scala:157)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:159)
	at dotty.tools.dotc.cc.CaptureSet.tryInclude(CaptureSet.scala:133)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:155)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:827)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$12(CaptureSet.scala:616)
	at dotty.tools.dotc.cc.CaptureSet$Var.$anonfun$11(CaptureSet.scala:616)
	at scala.collection.ArrayOps$.foldLeft$extension(ArrayOps.scala:784)
	at dotty.tools.dotc.util.SimpleIdentitySet$SetN.$div$colon(SimpleIdentitySet.scala:210)
	at dotty.tools.dotc.cc.CaptureSet$Var.addThisElem(CaptureSet.scala:615)
	at dotty.tools.dotc.cc.CaptureSet.addNewElem(CaptureSet.scala:155)
	at dotty.tools.dotc.cc.CaptureSet.tryInclude(CaptureSet.scala:133)
	at dotty.tools.dotc.cc.CaptureSet$BiMapped.tryInclude(CaptureSet.scala:832)
	at dotty.tools.dotc.cc.CaptureSet.$anonfun$1(CaptureSet.scala:139)
	at dotty.tools.dotc.cc.CaptureSet.tryInclude$$anonfun$1(CaptureSet.scala:139)
	at dotty.tools.dotc.util.SimpleIdentitySet$Set1.$div$colon(SimpleIdentitySet.scala:99)
	at dotty.tools.dotc.cc.CaptureSet.tryInclude(CaptureSet.scala:138)
	at dotty.tools.dotc.cc.CaptureSet.$anonfun$8(CaptureSet.scala:240)
	at dotty.tools.dotc.reporting.TraceSyntax.doTrace(trace.scala:124)
	at dotty.tools.dotc.reporting.TraceSyntax.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace(trace.scala:93)
	at dotty.tools.dotc.reporting.TraceSyntax.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace$(trace.scala:48)
	at dotty.tools.dotc.reporting.trace$force$.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace(trace.scala:23)
	at dotty.tools.dotc.cc.CaptureSet.subCaptures$$anonfun$2(CaptureSet.scala:240)
	at dotty.tools.dotc.reporting.TraceSyntax.doTrace(trace.scala:124)
	at dotty.tools.dotc.reporting.TraceSyntax.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace(trace.scala:93)
	at dotty.tools.dotc.reporting.TraceSyntax.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace$(trace.scala:48)
	at dotty.tools.dotc.reporting.trace$force$.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace(trace.scala:23)
	at dotty.tools.dotc.cc.CaptureSet.subCaptures(CaptureSet.scala:239)
	at dotty.tools.dotc.cc.CaptureSet.subCaptures(CaptureSet.scala:236)
	at dotty.tools.dotc.core.TypeComparer.subCaptures(TypeComparer.scala:2800)
	at dotty.tools.dotc.core.TypeComparer.compareCapturing$1(TypeComparer.scala:538)
	at dotty.tools.dotc.core.TypeComparer.secondTry$1(TypeComparer.scala:547)
	at dotty.tools.dotc.core.TypeComparer.firstTry$1(TypeComparer.scala:361)
	at dotty.tools.dotc.core.TypeComparer.recur$$anonfun$2(TypeComparer.scala:1583)
	at dotty.tools.dotc.reporting.TraceSyntax.doTrace(trace.scala:124)
	at dotty.tools.dotc.reporting.TraceSyntax.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace(trace.scala:93)
	at dotty.tools.dotc.reporting.TraceSyntax.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace$(trace.scala:48)
	at dotty.tools.dotc.reporting.trace$force$.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace(trace.scala:23)
	at dotty.tools.dotc.core.TypeComparer.recur(TypeComparer.scala:244)
	at dotty.tools.dotc.core.TypeComparer.isSubType(TypeComparer.scala:215)
	at dotty.tools.dotc.core.TypeComparer.isSubType(TypeComparer.scala:225)
	at dotty.tools.dotc.core.TypeComparer.isSubArg$1(TypeComparer.scala:1834)
	at dotty.tools.dotc.core.TypeComparer.recurArgs$1(TypeComparer.scala:1846)
	at dotty.tools.dotc.core.TypeComparer.isSubArgs(TypeComparer.scala:1856)
	at dotty.tools.dotc.core.TypeComparer.loop$1(TypeComparer.scala:1341)
	at dotty.tools.dotc.core.TypeComparer.isMatchingApply$1(TypeComparer.scala:1355)
	at dotty.tools.dotc.core.TypeComparer.compareAppliedType2$1(TypeComparer.scala:1425)
	at dotty.tools.dotc.core.TypeComparer.thirdTry$1(TypeComparer.scala:635)
	at dotty.tools.dotc.core.TypeComparer.secondTry$1(TypeComparer.scala:558)
	at dotty.tools.dotc.core.TypeComparer.firstTry$1(TypeComparer.scala:418)
	at dotty.tools.dotc.core.TypeComparer.recur$$anonfun$2(TypeComparer.scala:1583)
	at dotty.tools.dotc.reporting.TraceSyntax.doTrace(trace.scala:124)
	at dotty.tools.dotc.reporting.TraceSyntax.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace(trace.scala:93)
	at dotty.tools.dotc.reporting.TraceSyntax.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace$(trace.scala:48)
	at dotty.tools.dotc.reporting.trace$force$.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace(trace.scala:23)
	at dotty.tools.dotc.core.TypeComparer.recur(TypeComparer.scala:244)
	at dotty.tools.dotc.core.TypeComparer.isSubType(TypeComparer.scala:215)
	at dotty.tools.dotc.core.TypeComparer.checkBase$1(TypeComparer.scala:929)
	at dotty.tools.dotc.core.TypeComparer.tryBaseType$1(TypeComparer.scala:942)
	at dotty.tools.dotc.core.TypeComparer.compareAppliedType2$1(TypeComparer.scala:1436)
	at dotty.tools.dotc.core.TypeComparer.thirdTry$1(TypeComparer.scala:635)
	at dotty.tools.dotc.core.TypeComparer.secondTry$1(TypeComparer.scala:558)
	at dotty.tools.dotc.core.TypeComparer.firstTry$1(TypeComparer.scala:418)
	at dotty.tools.dotc.core.TypeComparer.recur$$anonfun$2(TypeComparer.scala:1583)
	at dotty.tools.dotc.reporting.TraceSyntax.doTrace(trace.scala:124)
	at dotty.tools.dotc.reporting.TraceSyntax.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace(trace.scala:93)
	at dotty.tools.dotc.reporting.TraceSyntax.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace$(trace.scala:48)
	at dotty.tools.dotc.reporting.trace$force$.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace(trace.scala:23)
	at dotty.tools.dotc.core.TypeComparer.recur(TypeComparer.scala:244)
	at dotty.tools.dotc.core.TypeComparer.compareCapturing$2(TypeComparer.scala:854)
	at dotty.tools.dotc.core.TypeComparer.thirdTry$1(TypeComparer.scala:879)
	at dotty.tools.dotc.core.TypeComparer.secondTry$1(TypeComparer.scala:558)
	at dotty.tools.dotc.core.TypeComparer.firstTry$1(TypeComparer.scala:361)
	at dotty.tools.dotc.core.TypeComparer.recur$$anonfun$2(TypeComparer.scala:1583)
	at dotty.tools.dotc.reporting.TraceSyntax.doTrace(trace.scala:124)
	at dotty.tools.dotc.reporting.TraceSyntax.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace(trace.scala:93)
	at dotty.tools.dotc.reporting.TraceSyntax.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace$(trace.scala:48)
	at dotty.tools.dotc.reporting.trace$force$.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace(trace.scala:23)
	at dotty.tools.dotc.core.TypeComparer.recur(TypeComparer.scala:244)
	at dotty.tools.dotc.core.TypeComparer.compareCapturing$1(TypeComparer.scala:545)
	at dotty.tools.dotc.core.TypeComparer.secondTry$1(TypeComparer.scala:547)
	at dotty.tools.dotc.core.TypeComparer.firstTry$1(TypeComparer.scala:361)
	at dotty.tools.dotc.core.TypeComparer.recur$$anonfun$2(TypeComparer.scala:1583)
	at dotty.tools.dotc.reporting.TraceSyntax.doTrace(trace.scala:124)
	at dotty.tools.dotc.reporting.TraceSyntax.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace(trace.scala:93)
	at dotty.tools.dotc.reporting.TraceSyntax.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace$(trace.scala:48)
	at dotty.tools.dotc.reporting.trace$force$.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace(trace.scala:23)
	at dotty.tools.dotc.core.TypeComparer.recur(TypeComparer.scala:244)
	at dotty.tools.dotc.core.TypeComparer.isSubType(TypeComparer.scala:215)
	at dotty.tools.dotc.core.TypeComparer.isSubType(TypeComparer.scala:225)
	at dotty.tools.dotc.core.TypeComparer.isSubInfo$1(TypeComparer.scala:673)
	at dotty.tools.dotc.core.TypeComparer.compareRefined$1(TypeComparer.scala:681)
	at dotty.tools.dotc.core.TypeComparer.thirdTry$1(TypeComparer.scala:708)
	at dotty.tools.dotc.core.TypeComparer.secondTry$1(TypeComparer.scala:558)
	at dotty.tools.dotc.core.TypeComparer.firstTry$1(TypeComparer.scala:418)
	at dotty.tools.dotc.core.TypeComparer.recur$$anonfun$2(TypeComparer.scala:1583)
	at dotty.tools.dotc.reporting.TraceSyntax.doTrace(trace.scala:124)
	at dotty.tools.dotc.reporting.TraceSyntax.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace(trace.scala:93)
	at dotty.tools.dotc.reporting.TraceSyntax.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace$(trace.scala:48)
	at dotty.tools.dotc.reporting.trace$force$.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace(trace.scala:23)
	at dotty.tools.dotc.core.TypeComparer.recur(TypeComparer.scala:244)
	at dotty.tools.dotc.core.TypeComparer.compareCapturing$1(TypeComparer.scala:545)
	at dotty.tools.dotc.core.TypeComparer.secondTry$1(TypeComparer.scala:547)
	at dotty.tools.dotc.core.TypeComparer.firstTry$1(TypeComparer.scala:418)
	at dotty.tools.dotc.core.TypeComparer.recur$$anonfun$2(TypeComparer.scala:1583)
	at dotty.tools.dotc.reporting.TraceSyntax.doTrace(trace.scala:124)
	at dotty.tools.dotc.reporting.TraceSyntax.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace(trace.scala:93)
	at dotty.tools.dotc.reporting.TraceSyntax.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace$(trace.scala:48)
	at dotty.tools.dotc.reporting.trace$force$.dotty$tools$dotc$reporting$TraceSyntax$$inline$doTrace(trace.scala:23)
	at dotty.tools.dotc.core.TypeComparer.recur(TypeComparer.scala:244)
	at dotty.tools.dotc.core.TypeComparer.isSubType(TypeComparer.scala:215)
	at dotty.tools.dotc.core.TypeComparer.isSubType(TypeComparer.scala:225)
	at dotty.tools.dotc.core.TypeComparer.topLevelSubType(TypeComparer.scala:133)
	at dotty.tools.dotc.core.TypeComparer$.topLevelSubType(TypeComparer.scala:3281)
	at dotty.tools.dotc.core.Types$Type.$less$colon$less(Types.scala:1128)
	at dotty.tools.dotc.transform.Recheck$Rechecker.isCompatible(Recheck.scala:616)
	at dotty.tools.dotc.cc.CheckCaptures$CaptureChecker.checkConformsExpr$$anonfun$1(CheckCaptures.scala:1337)
	at scala.Function0.apply$mcZ$sp(Function0.scala:42)
	at dotty.tools.dotc.cc.CCState.testOK$$anonfun$1(CCState.scala:35)
	at dotty.tools.dotc.cc.CCState.test(CCState.scala:29)
	at dotty.tools.dotc.cc.CCState.testOK(CCState.scala:35)
	at dotty.tools.dotc.cc.CheckCaptures$CaptureChecker.checkConformsExpr(CheckCaptures.scala:1337)
	at dotty.tools.dotc.transform.Recheck$Rechecker.checkConforms(Recheck.scala:612)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckFinish(Recheck.scala:573)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheck(Recheck.scala:578)
	at dotty.tools.dotc.cc.CheckCaptures$CaptureChecker.recheck(CheckCaptures.scala:1248)
	at dotty.tools.dotc.cc.CheckCaptures$CaptureChecker.recheckArg(CheckCaptures.scala:744)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckArgs$1(Recheck.scala:339)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckApply(Recheck.scala:348)
	at dotty.tools.dotc.cc.CheckCaptures$CaptureChecker.recheckApply(CheckCaptures.scala:734)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckUnnamed$1(Recheck.scala:540)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckStart(Recheck.scala:563)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheck(Recheck.scala:578)
	at dotty.tools.dotc.cc.CheckCaptures$CaptureChecker.recheck(CheckCaptures.scala:1248)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckValDef(Recheck.scala:267)
	at dotty.tools.dotc.cc.CheckCaptures$CaptureChecker.recheckValDef(CheckCaptures.scala:1005)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckDef(Recheck.scala:507)
	at dotty.tools.dotc.cc.CheckCaptures$CaptureChecker.completeDef(CheckCaptures.scala:1129)
	at dotty.tools.dotc.cc.Setup$$anon$3$$anon$5.complete(Setup.scala:688)
	at dotty.tools.dotc.core.SymDenotations$SymDenotation.completeFrom(SymDenotations.scala:175)
	at dotty.tools.dotc.core.Denotations$Denotation.completeInfo$1(Denotations.scala:190)
	at dotty.tools.dotc.core.Denotations$Denotation.info(Denotations.scala:192)
	at dotty.tools.dotc.core.SymDenotations$SymDenotation.ensureCompleted(SymDenotations.scala:393)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckNamed$1(Recheck.scala:525)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckStart(Recheck.scala:562)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheck(Recheck.scala:578)
	at dotty.tools.dotc.cc.CheckCaptures$CaptureChecker.recheck(CheckCaptures.scala:1248)
	at dotty.tools.dotc.transform.Recheck$Rechecker.traverse$1(Recheck.scala:494)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckStats(Recheck.scala:497)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckBlock(Recheck.scala:373)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckBlock(Recheck.scala:381)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckUnnamed$1(Recheck.scala:545)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckStart(Recheck.scala:563)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheck(Recheck.scala:578)
	at dotty.tools.dotc.cc.CheckCaptures$CaptureChecker.recheck(CheckCaptures.scala:1248)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckDefDef(Recheck.scala:274)
	at dotty.tools.dotc.cc.CheckCaptures$CaptureChecker.recheckDefDef(CheckCaptures.scala:1053)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckDef(Recheck.scala:508)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckNamed$1(Recheck.scala:526)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckStart(Recheck.scala:562)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheck(Recheck.scala:578)
	at dotty.tools.dotc.cc.CheckCaptures$CaptureChecker.recheck(CheckCaptures.scala:1248)
	at dotty.tools.dotc.transform.Recheck$Rechecker.traverse$1(Recheck.scala:494)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckStats(Recheck.scala:497)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckClassDef(Recheck.scala:284)
	at dotty.tools.dotc.cc.CheckCaptures$CaptureChecker.recheckClassDef(CheckCaptures.scala:1180)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckNamed$1(Recheck.scala:533)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckStart(Recheck.scala:562)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheck(Recheck.scala:578)
	at dotty.tools.dotc.cc.CheckCaptures$CaptureChecker.recheck(CheckCaptures.scala:1248)
	at dotty.tools.dotc.transform.Recheck$Rechecker.traverse$1(Recheck.scala:494)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckStats(Recheck.scala:497)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckPackageDef(Recheck.scala:486)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckUnnamed$1(Recheck.scala:557)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheckStart(Recheck.scala:563)
	at dotty.tools.dotc.transform.Recheck$Rechecker.recheck(Recheck.scala:578)
	at dotty.tools.dotc.cc.CheckCaptures$CaptureChecker.recheck(CheckCaptures.scala:1248)
	at dotty.tools.dotc.transform.Recheck$Rechecker.checkUnit(Recheck.scala:636)
	at dotty.tools.dotc.cc.CheckCaptures$CaptureChecker.iterate$1(CheckCaptures.scala:1767)
	at dotty.tools.dotc.cc.CheckCaptures$CaptureChecker.checkUnit$$anonfun$2(CheckCaptures.scala:1778)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at dotty.tools.dotc.cc.CaptureSet$.withCaptureSetsExplained(CaptureSet.scala:1450)
	at dotty.tools.dotc.cc.CheckCaptures$CaptureChecker.checkUnit(CheckCaptures.scala:1784)
	at dotty.tools.dotc.transform.Recheck.run(Recheck.scala:147)
	at dotty.tools.dotc.cc.CheckCaptures.run(CheckCaptures.scala:230)
	at dotty.tools.dotc.core.Phases$Phase.runOn$$anonfun$1(Phases.scala:383)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:334)
	at dotty.tools.dotc.core.Phases$Phase.runOn(Phases.scala:376)
	at dotty.tools.dotc.transform.Recheck.runOn(Recheck.scala:151)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:368)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1324)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:361)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1$$anonfun$2(Run.scala:408)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1$$anonfun$adapted$1(Run.scala:408)
	at scala.Function0.apply$mcV$sp(Function0.scala:42)
	at dotty.tools.dotc.Run.showProgress(Run.scala:470)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:408)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:420)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:69)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:420)
	at dotty.tools.dotc.Run.compileSources(Run.scala:307)
	at dotty.tools.dotc.Run.compile(Run.scala:292)
	at dotty.tools.dotc.Driver.doCompile(Driver.scala:37)
	at dotty.tools.dotc.Driver.process(Driver.scala:201)
	at dotty.tools.dotc.Driver.process(Driver.scala:169)
	at dotty.tools.dotc.Driver.process(Driver.scala:181)
	at dotty.tools.dotc.Driver.main(Driver.scala:211)
	at dotty.tools.dotc.Main.main(Main.scala)
[error] Nonzero exit code returned from runner: 1
[error] (scala3-compiler / Compile / runMain) Nonzero exit code returned from runner: 1
[error] Total time: 4 s, completed 15 May 2025, 20:19:34
#+end_example
